[
  {
    "name": "Accumulate",
    "args": [
      {
        "name": "Player",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgPlayer"
      },
      {
        "name": "Comparison",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgComparison"
      },
      {
        "name": "Number",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "ResourceType",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgResource"
      }
    ],
    "docs": ""
  },
  {
    "name": "AddCurrentPlayer",
    "args": [
      {
        "name": "p",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgOrder"
      }
    ],
    "docs": ""
  },
  {
    "name": "Always",
    "args": [],
    "docs": ""
  },
  {
    "name": "Assignable2List",
    "args": [
      {
        "name": "a",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "Bring",
    "args": [
      {
        "name": "Player",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgPlayer"
      },
      {
        "name": "Comparison",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgComparison"
      },
      {
        "name": "Number",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "Unit",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgUnit"
      },
      {
        "name": "Location",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgLocation"
      }
    ],
    "docs": ""
  },
  {
    "name": "CenterView",
    "args": [
      {
        "name": "Where",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgLocation"
      }
    ],
    "docs": ""
  },
  {
    "name": "CenterViewAll",
    "args": [
      {
        "name": "location",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgLocation"
      }
    ],
    "docs": "Action: CenterView for everyone (including observers)"
  },
  {
    "name": "Command",
    "args": [
      {
        "name": "Player",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgPlayer"
      },
      {
        "name": "Comparison",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgComparison"
      },
      {
        "name": "Number",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "Unit",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgUnit"
      }
    ],
    "docs": "[Player] commands [Comparison] [Number] [Unit].\n\n    Example::\n        Command(Player1, AtLeast, 30, \"Terran Marine\")\n\n\n    "
  },
  {
    "name": "CommandLeast",
    "args": [
      {
        "name": "Unit",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgUnit"
      }
    ],
    "docs": ""
  },
  {
    "name": "CommandLeastAt",
    "args": [
      {
        "name": "Unit",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgUnit"
      },
      {
        "name": "Location",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgLocation"
      }
    ],
    "docs": ""
  },
  {
    "name": "CommandMost",
    "args": [
      {
        "name": "Unit",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgUnit"
      }
    ],
    "docs": ""
  },
  {
    "name": "CommandMostAt",
    "args": [
      {
        "name": "Unit",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgUnit"
      },
      {
        "name": "Location",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgLocation"
      }
    ],
    "docs": ""
  },
  {
    "name": "Comment",
    "args": [
      {
        "name": "Text",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "CompressPayload",
    "args": [
      {
        "name": "mode",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": "Set payload compression mode.\n\n    :param mode: If true, enable object stacking (compression). If false,\n    disable it.\n    "
  },
  {
    "name": "CountdownTimer",
    "args": [
      {
        "name": "Comparison",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgComparison"
      },
      {
        "name": "Time",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": "Checks countdown timer.\n\n    Example::\n\n        CountdownTimer(AtLeast, 10)\n\n    Memory Layout::\n\n        0000 0000 0000 0000 TTTT TTTT 0000 CP01 0000\n\n        T : Time, CP : Comparison.\n    "
  },
  {
    "name": "CreatePayload",
    "args": [
      {
        "name": "root",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "CreateUnit",
    "args": [
      {
        "name": "Number",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "Unit",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgUnit"
      },
      {
        "name": "Where",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgLocation"
      },
      {
        "name": "ForPlayer",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgPlayer"
      }
    ],
    "docs": ""
  },
  {
    "name": "CreateUnitWithProperties",
    "args": [
      {
        "name": "Count",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "Unit",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgUnit"
      },
      {
        "name": "Where",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgLocation"
      },
      {
        "name": "Player",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgPlayer"
      },
      {
        "name": "Properties",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgProperty"
      }
    ],
    "docs": ""
  },
  {
    "name": "Deaths",
    "args": [
      {
        "name": "Player",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgPlayer"
      },
      {
        "name": "Comparison",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgComparison"
      },
      {
        "name": "Number",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "Unit",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgUnit"
      }
    ],
    "docs": ""
  },
  {
    "name": "DeathsX",
    "args": [
      {
        "name": "Player",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgPlayer"
      },
      {
        "name": "Comparison",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgComparison"
      },
      {
        "name": "Number",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "Unit",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgUnit"
      },
      {
        "name": "Mask",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "Defeat",
    "args": [],
    "docs": ""
  },
  {
    "name": "Disabled",
    "args": [
      {
        "name": "arg",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": "Disable condition or action"
  },
  {
    "name": "DisplayText",
    "args": [
      {
        "name": "Text",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "AlwaysDisplay",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "4",
          "type": "int"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "DisplayTextAll",
    "args": [
      {
        "name": "text",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": "Action: DisplayText for everyone (including observers)"
  },
  {
    "name": "DisplayTextAllAt",
    "args": [
      {
        "name": "line",
        "kind": "POSITIONAL_ONLY",
        "default": {
          "value": "empty",
          "type": "str"
        },
        "type": "any"
      },
      {
        "name": "text",
        "kind": "POSITIONAL_ONLY",
        "default": {
          "value": "empty",
          "type": "str"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "DisplayTextAt",
    "args": [
      {
        "name": "line",
        "kind": "POSITIONAL_ONLY",
        "default": {
          "value": "empty",
          "type": "str"
        },
        "type": "any"
      },
      {
        "name": "text",
        "kind": "POSITIONAL_ONLY",
        "default": {
          "value": "empty",
          "type": "str"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "DoActions",
    "args": [
      {
        "name": "actions",
        "kind": "VAR_POSITIONAL",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "preserved",
        "kind": "KEYWORD_ONLY",
        "default": {
          "value": "True",
          "type": "bool"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "Draw",
    "args": [],
    "docs": ""
  },
  {
    "name": "EPD",
    "args": [
      {
        "name": "p",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgOrder"
      }
    ],
    "docs": ""
  },
  {
    "name": "EPDOffsetMap",
    "args": [
      {
        "name": "ct",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": "dictionary of \"name\": (size, offset) pairs\n\n    size: 1, 2, 4 or bool, \"cunit\", \"sprite\", \"pos\"\n    offset: int\n    "
  },
  {
    "name": "EPDSwitch",
    "args": [
      {
        "name": "epd",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "mask",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "4294967295",
          "type": "int"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "EPS_SetDebug",
    "args": [
      {
        "name": "b",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "EP_SetRValueStrictMode",
    "args": [
      {
        "name": "mode",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "EUDAnd",
    "args": [
      {
        "name": "cond1",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "conds",
        "kind": "VAR_POSITIONAL",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": " cond1 && cond2 && ... && condn\n\n    .. note::\n        This function computes AND value of various conditions.\n        If you don't want to do much computation, you should better use\n        plain list instead of this function.\n\n    .. warning:: Short circuiting is not supported.\n\n    :param conds: List of conditions\n    "
  },
  {
    "name": "EUDBinaryMax",
    "args": [
      {
        "name": "cond",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "minv",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "0",
          "type": "int"
        },
        "type": "any"
      },
      {
        "name": "maxv",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "4294967295",
          "type": "int"
        },
        "type": "any"
      }
    ],
    "docs": "Find maximum x satisfying cond(x) using binary search\n\n    :param cond: Test condition\n    :param minv: Minimum value in domain\n    :param maxv: Maximum value in domain\n\n    Cond should be binary classifier, meaning that for some N\n        for all x > N, cond(x) is false.\n        for all x <= N, cond(x) is true\n    Then EUDBinaryMin will find such N.\n\n    .. note:: If none of the value satisfies condition, then this\n        function will return maxv.\n    "
  },
  {
    "name": "EUDBinaryMin",
    "args": [
      {
        "name": "cond",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "minv",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "0",
          "type": "int"
        },
        "type": "any"
      },
      {
        "name": "maxv",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "4294967295",
          "type": "int"
        },
        "type": "any"
      }
    ],
    "docs": "Find minimum x satisfying cond(x) using binary search\n\n    :param cond: Test condition\n    :param minv: Minimum value in domain\n    :param maxv: Maximum value in domain\n\n    Cond should be binary classifier, meaning that for some N\n        for all x < N, cond(x) is false.\n        for all x >= N, cond(x) is true\n    Then EUDBinaryMin will find such N\n\n    .. note:: If none of the value satisfies condition, then this\n        function will return maxv.\n    "
  },
  {
    "name": "EUDBranch",
    "args": [
      {
        "name": "conditions",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "ontrue",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "onfalse",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "_actions",
        "kind": "KEYWORD_ONLY",
        "default": {
          "value": "None",
          "type": "NoneType"
        },
        "type": "any"
      }
    ],
    "docs": "Branch by whether conditions is satisfied or not.\n\n    :param conditions: Nested list of conditions.\n    :param ontrue: When all conditions are true, this branch is taken.\n    :param onfalse: When any of the conditions are false, this branch is taken.\n    "
  },
  {
    "name": "EUDBreak",
    "args": [],
    "docs": ""
  },
  {
    "name": "EUDBreakIf",
    "args": [
      {
        "name": "conditions",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "EUDBreakIfNot",
    "args": [
      {
        "name": "conditions",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "EUDClearNamespace",
    "args": [],
    "docs": ""
  },
  {
    "name": "EUDContinue",
    "args": [],
    "docs": ""
  },
  {
    "name": "EUDContinueIf",
    "args": [
      {
        "name": "conditions",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "EUDContinueIfNot",
    "args": [
      {
        "name": "conditions",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "EUDCreateBlock",
    "args": [
      {
        "name": "name",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "userdata",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "EUDCreateVariables",
    "args": [
      {
        "name": "varn",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "EUDDoEvents",
    "args": [],
    "docs": ""
  },
  {
    "name": "EUDElse",
    "args": [],
    "docs": ""
  },
  {
    "name": "EUDElseIf",
    "args": [],
    "docs": ""
  },
  {
    "name": "EUDElseIfNot",
    "args": [],
    "docs": ""
  },
  {
    "name": "EUDEndExecuteOnce",
    "args": [],
    "docs": ""
  },
  {
    "name": "EUDEndIf",
    "args": [],
    "docs": ""
  },
  {
    "name": "EUDEndInfLoop",
    "args": [],
    "docs": ""
  },
  {
    "name": "EUDEndLoopN",
    "args": [],
    "docs": ""
  },
  {
    "name": "EUDEndPlayerLoop",
    "args": [],
    "docs": ""
  },
  {
    "name": "EUDEndSwitch",
    "args": [],
    "docs": ""
  },
  {
    "name": "EUDEndWhile",
    "args": [],
    "docs": ""
  },
  {
    "name": "EUDExecuteOnce",
    "args": [],
    "docs": ""
  },
  {
    "name": "EUDFullFunc",
    "args": [
      {
        "name": "arginitvals",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "argtypes",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "rettypes",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "None",
          "type": "NoneType"
        },
        "type": "any"
      },
      {
        "name": "traced",
        "kind": "KEYWORD_ONLY",
        "default": {
          "value": "False",
          "type": "bool"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "EUDFunc",
    "args": [
      {
        "name": "fdecl_func",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "EUDFuncPtr",
    "args": [
      {
        "name": "argn",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "retn",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "EUDGetBlockList",
    "args": [],
    "docs": ""
  },
  {
    "name": "EUDGetLastBlock",
    "args": [],
    "docs": ""
  },
  {
    "name": "EUDGetLastBlockOfName",
    "args": [
      {
        "name": "name",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "EUDIf",
    "args": [],
    "docs": ""
  },
  {
    "name": "EUDIfNot",
    "args": [],
    "docs": ""
  },
  {
    "name": "EUDInfLoop",
    "args": [],
    "docs": ""
  },
  {
    "name": "EUDIsContinuePointSet",
    "args": [],
    "docs": ""
  },
  {
    "name": "EUDJump",
    "args": [
      {
        "name": "nextptr",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "EUDJumpIf",
    "args": [
      {
        "name": "conditions",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "ontrue",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "_actions",
        "kind": "KEYWORD_ONLY",
        "default": {
          "value": "None",
          "type": "NoneType"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "EUDJumpIfNot",
    "args": [
      {
        "name": "conditions",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "onfalse",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "_actions",
        "kind": "KEYWORD_ONLY",
        "default": {
          "value": "None",
          "type": "NoneType"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "EUDLoopBullet",
    "args": [],
    "docs": ""
  },
  {
    "name": "EUDLoopList",
    "args": [
      {
        "name": "header_offset",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "break_offset",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "None",
          "type": "NoneType"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "EUDLoopN",
    "args": [],
    "docs": ""
  },
  {
    "name": "EUDLoopNewUnit",
    "args": [
      {
        "name": "allowance",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "2",
          "type": "int"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "EUDLoopPlayer",
    "args": [
      {
        "name": "ptype",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "Human",
          "type": "str"
        },
        "type": "any"
      },
      {
        "name": "force",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "None",
          "type": "NoneType"
        },
        "type": "any"
      },
      {
        "name": "race",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "None",
          "type": "NoneType"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "EUDLoopPlayerUnit",
    "args": [
      {
        "name": "player",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "EUDLoopRange",
    "args": [
      {
        "name": "start",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "end",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "None",
          "type": "NoneType"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "EUDLoopSprite",
    "args": [],
    "docs": ""
  },
  {
    "name": "EUDLoopTrigger",
    "args": [
      {
        "name": "player",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "EUDLoopUnit",
    "args": [],
    "docs": ""
  },
  {
    "name": "EUDLoopUnit2",
    "args": [],
    "docs": "EUDLoopUnit\ubcf4\ub2e4 \uc57d\uac04? \ube60\ub985\ub2c8\ub2e4. \uc720\ub2db \ub9ac\uc2a4\ud2b8\ub97c \ub530\ub77c\uac00\uc9c0 \uc54a\uace0\n    1700\uac1c \uc720\ub2db\uc744 \ub3c4\ub294 \ubc29\uc2dd\uc73c\ub85c \uc791\ub3d9\ud569\ub2c8\ub2e4.\n    "
  },
  {
    "name": "EUDMethod",
    "args": [
      {
        "name": "method",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "EUDNot",
    "args": [
      {
        "name": "cond",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": " !cond\n\n    :param conds: Condition to negate\n    "
  },
  {
    "name": "EUDOnStart",
    "args": [
      {
        "name": "func",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "EUDOr",
    "args": [
      {
        "name": "cond1",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "conds",
        "kind": "VAR_POSITIONAL",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": " cond1 || cond2 || ... || condn\n\n    .. warning:: Short circuiting is not supported\n\n    :param conds: List of conditions\n    "
  },
  {
    "name": "EUDPeekBlock",
    "args": [
      {
        "name": "name",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "EUDPlayerLoop",
    "args": [],
    "docs": ""
  },
  {
    "name": "EUDPopBlock",
    "args": [
      {
        "name": "name",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "EUDQueue",
    "args": [
      {
        "name": "capacity",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "EUDRegisterObjectToNamespace",
    "args": [
      {
        "name": "funcname",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "obj",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": " Register object to inline code namespace. "
  },
  {
    "name": "EUDRegistered",
    "args": [
      {
        "name": "func",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": " Decoreator for registering class / function. "
  },
  {
    "name": "EUDReturn",
    "args": [
      {
        "name": "args",
        "kind": "VAR_POSITIONAL",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "EUDSetContinuePoint",
    "args": [],
    "docs": ""
  },
  {
    "name": "EUDStack",
    "args": [
      {
        "name": "basetype",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "None",
          "type": "NoneType"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "EUDSwitch",
    "args": [
      {
        "name": "var",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "mask",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "4294967295",
          "type": "int"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "EUDSwitchCase",
    "args": [],
    "docs": ""
  },
  {
    "name": "EUDSwitchDefault",
    "args": [],
    "docs": ""
  },
  {
    "name": "EUDTernary",
    "args": [
      {
        "name": "conditions",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "neg",
        "kind": "KEYWORD_ONLY",
        "default": {
          "value": "False",
          "type": "bool"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "EUDTraceLog",
    "args": [
      {
        "name": "lineno",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "None",
          "type": "NoneType"
        },
        "type": "any"
      }
    ],
    "docs": "Log trace."
  },
  {
    "name": "EUDTracedFunc",
    "args": [
      {
        "name": "fdecl_func",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "EUDTracedMethod",
    "args": [
      {
        "name": "method",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "EUDTracedTypedFunc",
    "args": [
      {
        "name": "argtypes",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "rettypes",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "None",
          "type": "NoneType"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "EUDTracedTypedMethod",
    "args": [
      {
        "name": "argtypes",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "rettypes",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "None",
          "type": "NoneType"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "EUDTypedFunc",
    "args": [
      {
        "name": "argtypes",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "rettypes",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "None",
          "type": "NoneType"
        },
        "type": "any"
      },
      {
        "name": "traced",
        "kind": "KEYWORD_ONLY",
        "default": {
          "value": "False",
          "type": "bool"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "EUDTypedFuncPtr",
    "args": [
      {
        "name": "argtypes",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "rettypes",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "EUDTypedMethod",
    "args": [
      {
        "name": "argtypes",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "rettypes",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "None",
          "type": "NoneType"
        },
        "type": "any"
      },
      {
        "name": "traced",
        "kind": "KEYWORD_ONLY",
        "default": {
          "value": "False",
          "type": "bool"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "EUDVArray",
    "args": [
      {
        "name": "size",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "basetype",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "None",
          "type": "NoneType"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "EUDWhile",
    "args": [],
    "docs": ""
  },
  {
    "name": "EUDWhileNot",
    "args": [],
    "docs": ""
  },
  {
    "name": "EUDXTypedFunc",
    "args": [
      {
        "name": "argmasks",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "argtypes",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "rettypes",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "None",
          "type": "NoneType"
        },
        "type": "any"
      },
      {
        "name": "traced",
        "kind": "KEYWORD_ONLY",
        "default": {
          "value": "False",
          "type": "bool"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "ElapsedTime",
    "args": [
      {
        "name": "Comparison",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgComparison"
      },
      {
        "name": "Time",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "EncodeAIScript",
    "args": [
      {
        "name": "ais",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgAIScript"
      },
      {
        "name": "issueError",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "False",
          "type": "bool"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "EncodeAllyStatus",
    "args": [
      {
        "name": "s",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgResource"
      },
      {
        "name": "issueError",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "False",
          "type": "bool"
        },
        "type": "any"
      }
    ],
    "docs": "\n    Convert [Enemy, Ally, AlliedVictory] to number [0, 1, 2].\n    "
  },
  {
    "name": "EncodeComparison",
    "args": [
      {
        "name": "s",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgResource"
      },
      {
        "name": "issueError",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "False",
          "type": "bool"
        },
        "type": "any"
      }
    ],
    "docs": "\n    Convert [AtLeast, AtMost, Exactly] to number [0, 1, 10].\n    "
  },
  {
    "name": "EncodeCount",
    "args": [
      {
        "name": "s",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgResource"
      },
      {
        "name": "issueError",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "False",
          "type": "bool"
        },
        "type": "any"
      }
    ],
    "docs": "\n    Convert [All, (other numbers)] to number [0, (as-is)].\n    "
  },
  {
    "name": "EncodeImage",
    "args": [
      {
        "name": "image",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "issueError",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "False",
          "type": "bool"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "EncodeIscript",
    "args": [
      {
        "name": "iscript",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "issueError",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "False",
          "type": "bool"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "EncodeLocation",
    "args": [
      {
        "name": "loc",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "issueError",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "False",
          "type": "bool"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "EncodeModifier",
    "args": [
      {
        "name": "s",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgResource"
      },
      {
        "name": "issueError",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "False",
          "type": "bool"
        },
        "type": "any"
      }
    ],
    "docs": "\n    Convert [SetTo, Add, Subtract] to number [7, 8, 9].\n    "
  },
  {
    "name": "EncodeOrder",
    "args": [
      {
        "name": "s",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgResource"
      },
      {
        "name": "issueError",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "False",
          "type": "bool"
        },
        "type": "any"
      }
    ],
    "docs": "\n    Convert [Move, Patrol, Attack] to number [0, 1, 2].\n    "
  },
  {
    "name": "EncodePlayer",
    "args": [
      {
        "name": "s",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgResource"
      },
      {
        "name": "issueError",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "False",
          "type": "bool"
        },
        "type": "any"
      }
    ],
    "docs": "\n    Convert player identifier to corresponding number.\n\n    ======================= ========\n        Identifier           Number\n    ======================= ========\n    P1                         0\n    P2                         1\n    P3                         2\n    P4                         3\n    P5                         4\n    P6                         5\n    P7                         6\n    P8                         7\n    P9                         8\n    P10                        9\n    P11                        10\n    P12                        11\n    Player1                    0\n    Player2                    1\n    Player3                    2\n    Player4                    3\n    Player5                    4\n    Player6                    5\n    Player7                    6\n    Player8                    7\n    Player9                    8\n    Player10                   9\n    Player11                   10\n    Player12                   11\n    CurrentPlayer              13\n    Foes                       14\n    Allies                     15\n    NeutralPlayers             16\n    AllPlayers                 17\n    Force1                     18\n    Force2                     19\n    Force3                     20\n    Force4                     21\n    NonAlliedVictoryPlayers    26\n    ======================= ========\n\n    "
  },
  {
    "name": "EncodePropState",
    "args": [
      {
        "name": "s",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgResource"
      },
      {
        "name": "issueError",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "False",
          "type": "bool"
        },
        "type": "any"
      }
    ],
    "docs": "\n    Convert [Enable, Disable, Toogle] to number [4, 5, 6]\n    "
  },
  {
    "name": "EncodeProperty",
    "args": [
      {
        "name": "prop",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgProperty"
      },
      {
        "name": "issueError",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "False",
          "type": "bool"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "EncodeResource",
    "args": [
      {
        "name": "s",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgResource"
      },
      {
        "name": "issueError",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "False",
          "type": "bool"
        },
        "type": "any"
      }
    ],
    "docs": "\n    Convert [Ore, Gas, OreAndGas] to [0, 1, 2]\n    "
  },
  {
    "name": "EncodeScore",
    "args": [
      {
        "name": "s",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgResource"
      },
      {
        "name": "issueError",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "False",
          "type": "bool"
        },
        "type": "any"
      }
    ],
    "docs": "\n    Convert score type identifier to number.\n\n    ================= ========\n        Score type     Number\n    ================= ========\n    Total                0\n    Units                1\n    Buildings            2\n    UnitsAndBuildings    3\n    Kills                4\n    Razings              5\n    KillsAndRazings      6\n    Custom               7\n    ================= ========\n\n    "
  },
  {
    "name": "EncodeString",
    "args": [
      {
        "name": "s",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgResource"
      },
      {
        "name": "issueError",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "False",
          "type": "bool"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "EncodeSwitch",
    "args": [
      {
        "name": "sw",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "issueError",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "False",
          "type": "bool"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "EncodeSwitchAction",
    "args": [
      {
        "name": "s",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgResource"
      },
      {
        "name": "issueError",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "False",
          "type": "bool"
        },
        "type": "any"
      }
    ],
    "docs": "\n    Convert [Set, Clear, Toogle, Random] to [4, 5, 6, 11].\n    "
  },
  {
    "name": "EncodeSwitchState",
    "args": [
      {
        "name": "s",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgResource"
      },
      {
        "name": "issueError",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "False",
          "type": "bool"
        },
        "type": "any"
      }
    ],
    "docs": "\n    Convert [Set, Cleared] to [2, 3].\n    "
  },
  {
    "name": "EncodeTBL",
    "args": [
      {
        "name": "t",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgUnit"
      },
      {
        "name": "issueError",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "False",
          "type": "bool"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "EncodeUnit",
    "args": [
      {
        "name": "u",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgResource"
      },
      {
        "name": "issueError",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "False",
          "type": "bool"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "Evaluate",
    "args": [
      {
        "name": "x",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": "\n    Evaluate expressions\n    "
  },
  {
    "name": "FlattenList",
    "args": [
      {
        "name": "l",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "GetChkTokenized",
    "args": [],
    "docs": ""
  },
  {
    "name": "GetCurrentJumpBuffer",
    "args": [],
    "docs": ""
  },
  {
    "name": "GetEUDNamespace",
    "args": [],
    "docs": " Get list of functions that inline code can use. "
  },
  {
    "name": "GetFirstTrigTrigger",
    "args": [
      {
        "name": "player",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": " Get dlist start of trig-trigger for player "
  },
  {
    "name": "GetGlobalStringBuffer",
    "args": [],
    "docs": ""
  },
  {
    "name": "GetLastTrigTrigger",
    "args": [
      {
        "name": "player",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": " Get dlist end of trig-trigger for player"
  },
  {
    "name": "GetLocationIndex",
    "args": [
      {
        "name": "l",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "GetMapStringAddr",
    "args": [
      {
        "name": "strId",
        "kind": "POSITIONAL_ONLY",
        "default": {
          "value": "empty",
          "type": "str"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "GetObjectAddr",
    "args": [
      {
        "name": "obj",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "GetPlayerInfo",
    "args": [
      {
        "name": "player",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "GetPropertyIndex",
    "args": [
      {
        "name": "prop",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgProperty"
      }
    ],
    "docs": ""
  },
  {
    "name": "GetStringIndex",
    "args": [
      {
        "name": "s",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgResource"
      }
    ],
    "docs": ""
  },
  {
    "name": "GetSwitchIndex",
    "args": [
      {
        "name": "s",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgResource"
      }
    ],
    "docs": ""
  },
  {
    "name": "GetTBLAddr",
    "args": [
      {
        "name": "tblId",
        "kind": "POSITIONAL_ONLY",
        "default": {
          "value": "empty",
          "type": "str"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "GetTraceStackDepth",
    "args": [],
    "docs": ""
  },
  {
    "name": "GetTriggerCounter",
    "args": [],
    "docs": ""
  },
  {
    "name": "GetUnitIndex",
    "args": [
      {
        "name": "u",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgResource"
      }
    ],
    "docs": ""
  },
  {
    "name": "GiveUnits",
    "args": [
      {
        "name": "Count",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "Unit",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgUnit"
      },
      {
        "name": "Owner",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgPlayer"
      },
      {
        "name": "Where",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgLocation"
      },
      {
        "name": "NewOwner",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgPlayer"
      }
    ],
    "docs": ""
  },
  {
    "name": "HighestScore",
    "args": [
      {
        "name": "ScoreType",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgScore"
      }
    ],
    "docs": ""
  },
  {
    "name": "IsConstExpr",
    "args": [
      {
        "name": "x",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "IsEUDVariable",
    "args": [
      {
        "name": "x",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "IsMapdataInitalized",
    "args": [],
    "docs": ""
  },
  {
    "name": "IsPName",
    "args": [
      {
        "name": "player",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "name",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "IsSCDBMap",
    "args": [],
    "docs": ""
  },
  {
    "name": "IsUserCP",
    "args": [],
    "docs": "Condition: check if CurrentPlayer equals to user player id (local)"
  },
  {
    "name": "KillUnit",
    "args": [
      {
        "name": "Unit",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgUnit"
      },
      {
        "name": "Player",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgPlayer"
      }
    ],
    "docs": ""
  },
  {
    "name": "KillUnitAt",
    "args": [
      {
        "name": "Count",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "Unit",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgUnit"
      },
      {
        "name": "Where",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgLocation"
      },
      {
        "name": "ForPlayer",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgPlayer"
      }
    ],
    "docs": ""
  },
  {
    "name": "LeaderBoardComputerPlayers",
    "args": [
      {
        "name": "State",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "LeaderBoardControl",
    "args": [
      {
        "name": "Unit",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgUnit"
      },
      {
        "name": "Label",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "LeaderBoardControlAt",
    "args": [
      {
        "name": "Unit",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgUnit"
      },
      {
        "name": "Location",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgLocation"
      },
      {
        "name": "Label",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "LeaderBoardGoalControl",
    "args": [
      {
        "name": "Goal",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "Unit",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgUnit"
      },
      {
        "name": "Label",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "LeaderBoardGoalControlAt",
    "args": [
      {
        "name": "Goal",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "Unit",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgUnit"
      },
      {
        "name": "Location",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgLocation"
      },
      {
        "name": "Label",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "LeaderBoardGoalKills",
    "args": [
      {
        "name": "Goal",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "Unit",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgUnit"
      },
      {
        "name": "Label",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "LeaderBoardGoalResources",
    "args": [
      {
        "name": "Goal",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "ResourceType",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgResource"
      },
      {
        "name": "Label",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "LeaderBoardGoalScore",
    "args": [
      {
        "name": "Goal",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "ScoreType",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgScore"
      },
      {
        "name": "Label",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "LeaderBoardGreed",
    "args": [
      {
        "name": "Goal",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "LeaderBoardKills",
    "args": [
      {
        "name": "Unit",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgUnit"
      },
      {
        "name": "Label",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "LeaderBoardResources",
    "args": [
      {
        "name": "ResourceType",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgResource"
      },
      {
        "name": "Label",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "LeaderBoardScore",
    "args": [
      {
        "name": "ScoreType",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgScore"
      },
      {
        "name": "Label",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "LeastKills",
    "args": [
      {
        "name": "Unit",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgUnit"
      }
    ],
    "docs": ""
  },
  {
    "name": "LeastResources",
    "args": [
      {
        "name": "ResourceType",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgResource"
      }
    ],
    "docs": ""
  },
  {
    "name": "List2Assignable",
    "args": [
      {
        "name": "l",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "LoadMap",
    "args": [
      {
        "name": "fname",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": "Load basemap from fname\n\n    :param fname: Path for basemap.\n    "
  },
  {
    "name": "LowestScore",
    "args": [
      {
        "name": "ScoreType",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgScore"
      }
    ],
    "docs": ""
  },
  {
    "name": "MPQAddFile",
    "args": [
      {
        "name": "fname",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "content",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "isWave",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "False",
          "type": "bool"
        },
        "type": "any"
      }
    ],
    "docs": "Add file/wave to output map.\n\n    :param fname: Desired filename in mpq\n    :param content: Content to put inside.\n    :param isWave: Is file wave file? Wave file can be lossy compressed if this\n        flag is set to True.\n\n    .. note::\n        This function may error if duplicate filenames is found. However, not\n        all duplicated filenames are guaranteed to be catched here. Some of\n        them may be catched at UpdateMPQ(internal) function.\n    "
  },
  {
    "name": "MPQAddWave",
    "args": [
      {
        "name": "fname",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "content",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": "Add wave to output map.\n\n    :param fname: Desired filename in mpq\n    :param content: Content to put inside.\n\n    .. note:: See `MPQAddFile` for more info\n    "
  },
  {
    "name": "MPQCheckFile",
    "args": [
      {
        "name": "fname",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": "Check if filename is already exist.\n\n    :param fname: Desired filename in mpq\n    "
  },
  {
    "name": "Memory",
    "args": [
      {
        "name": "dest",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "cmptype",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgComparison"
      },
      {
        "name": "value",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "MemoryEPD",
    "args": [
      {
        "name": "dest",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "cmptype",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgComparison"
      },
      {
        "name": "value",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "MemoryX",
    "args": [
      {
        "name": "dest",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "cmptype",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgComparison"
      },
      {
        "name": "value",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "mask",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "MemoryXEPD",
    "args": [
      {
        "name": "dest",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "cmptype",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgComparison"
      },
      {
        "name": "value",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "mask",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "MinimapPing",
    "args": [
      {
        "name": "Where",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgLocation"
      }
    ],
    "docs": ""
  },
  {
    "name": "MinimapPingAll",
    "args": [
      {
        "name": "location",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgLocation"
      }
    ],
    "docs": "Action: MinimapPing for everyone (including observers)"
  },
  {
    "name": "ModifyUnitEnergy",
    "args": [
      {
        "name": "Count",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "Unit",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgUnit"
      },
      {
        "name": "Owner",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgPlayer"
      },
      {
        "name": "Where",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgLocation"
      },
      {
        "name": "Percent",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "ModifyUnitHangarCount",
    "args": [
      {
        "name": "Add",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "Count",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "Unit",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgUnit"
      },
      {
        "name": "Owner",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgPlayer"
      },
      {
        "name": "Where",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgLocation"
      }
    ],
    "docs": ""
  },
  {
    "name": "ModifyUnitHitPoints",
    "args": [
      {
        "name": "Count",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "Unit",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgUnit"
      },
      {
        "name": "Owner",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgPlayer"
      },
      {
        "name": "Where",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgLocation"
      },
      {
        "name": "Percent",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "ModifyUnitResourceAmount",
    "args": [
      {
        "name": "Count",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "Owner",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgPlayer"
      },
      {
        "name": "Where",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgLocation"
      },
      {
        "name": "NewValue",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "ModifyUnitShields",
    "args": [
      {
        "name": "Count",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "Unit",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgUnit"
      },
      {
        "name": "Owner",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgPlayer"
      },
      {
        "name": "Where",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgLocation"
      },
      {
        "name": "Percent",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "MostKills",
    "args": [
      {
        "name": "Unit",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgUnit"
      }
    ],
    "docs": ""
  },
  {
    "name": "MostResources",
    "args": [
      {
        "name": "ResourceType",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgResource"
      }
    ],
    "docs": ""
  },
  {
    "name": "MoveLocation",
    "args": [
      {
        "name": "Location",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgLocation"
      },
      {
        "name": "OnUnit",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgUnit"
      },
      {
        "name": "Owner",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgPlayer"
      },
      {
        "name": "DestLocation",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgLocation"
      }
    ],
    "docs": ""
  },
  {
    "name": "MoveUnit",
    "args": [
      {
        "name": "Count",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "UnitType",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgUnit"
      },
      {
        "name": "Owner",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgPlayer"
      },
      {
        "name": "StartLocation",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgLocation"
      },
      {
        "name": "DestLocation",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgLocation"
      }
    ],
    "docs": ""
  },
  {
    "name": "MuteUnitSpeech",
    "args": [],
    "docs": ""
  },
  {
    "name": "Never",
    "args": [],
    "docs": ""
  },
  {
    "name": "NextTrigger",
    "args": [],
    "docs": ""
  },
  {
    "name": "NonSeqCompute",
    "args": [
      {
        "name": "assignpairs",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "Opponents",
    "args": [
      {
        "name": "Player",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgPlayer"
      },
      {
        "name": "Comparison",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgComparison"
      },
      {
        "name": "Number",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "Order",
    "args": [
      {
        "name": "Unit",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgUnit"
      },
      {
        "name": "Owner",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgPlayer"
      },
      {
        "name": "StartLocation",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgLocation"
      },
      {
        "name": "OrderType",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgOrder"
      },
      {
        "name": "DestLocation",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgLocation"
      }
    ],
    "docs": ""
  },
  {
    "name": "PColor",
    "args": [
      {
        "name": "i",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgUnit"
      }
    ],
    "docs": ""
  },
  {
    "name": "PName",
    "args": [
      {
        "name": "x",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "PRT_SetInliningRate",
    "args": [
      {
        "name": "rate",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": " Set how much triggers will be inlined into STR section. "
  },
  {
    "name": "PRT_SkipPayloadRelocator",
    "args": [
      {
        "name": "enable",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "PTrigger",
    "args": [
      {
        "name": "players",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "conditions",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "None",
          "type": "NoneType"
        },
        "type": "any"
      },
      {
        "name": "actions",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "None",
          "type": "NoneType"
        },
        "type": "any"
      }
    ],
    "docs": "Execute trigger by player basis\n\n    :param players: Players the trigger should execute with. When Current\n        Player specifies any of the players, trigger will execute.\n    :param conditions: List of conditions. If all conditions are met, then\n        actions will be executed.\n    :param actions: List of actions.\n    "
  },
  {
    "name": "PauseGame",
    "args": [],
    "docs": ""
  },
  {
    "name": "PauseTimer",
    "args": [],
    "docs": ""
  },
  {
    "name": "PlayWAV",
    "args": [
      {
        "name": "WAVName",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "PlayWAVAll",
    "args": [
      {
        "name": "soundpath",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": "Action: PlayWAV for everyone (including observers)"
  },
  {
    "name": "PopTriggerScope",
    "args": [],
    "docs": ""
  },
  {
    "name": "PreserveTrigger",
    "args": [],
    "docs": ""
  },
  {
    "name": "PushTriggerScope",
    "args": [],
    "docs": ""
  },
  {
    "name": "QueueGameCommand",
    "args": [
      {
        "name": "data",
        "kind": "POSITIONAL_ONLY",
        "default": {
          "value": "empty",
          "type": "str"
        },
        "type": "any"
      },
      {
        "name": "size",
        "kind": "POSITIONAL_ONLY",
        "default": {
          "value": "empty",
          "type": "str"
        },
        "type": "any"
      }
    ],
    "docs": "Queue game command to packet queue.\n\n    Starcraft periodically broadcasts game packets to other player. Game\n    packets are stored to queue, and this function add data to that queue, so\n    that SC can broadcast it.\n\n    :param data: Data to put in queue\n    :param size: Size of data\n\n    .. note::\n        If packet queue is full, this function fails. This behavior is silent\n        without any warning or error, since this behavior shouldn't happen in\n        common situations. So **Don't use this function too much in a frame.**\n\n    "
  },
  {
    "name": "QueueGameCommand_MergeArchon",
    "args": [],
    "docs": ""
  },
  {
    "name": "QueueGameCommand_MergeDarkArchon",
    "args": [],
    "docs": ""
  },
  {
    "name": "QueueGameCommand_MinimapPing",
    "args": [
      {
        "name": "xy",
        "kind": "POSITIONAL_ONLY",
        "default": {
          "value": "empty",
          "type": "str"
        },
        "type": "any"
      }
    ],
    "docs": "Queue minimap ping action.\n\n    :param xy: (y * 65536) + x, where (x, y) is coordinate for minimap ping.\n    "
  },
  {
    "name": "QueueGameCommand_PauseGame",
    "args": [],
    "docs": ""
  },
  {
    "name": "QueueGameCommand_QueuedRightClick",
    "args": [
      {
        "name": "xy",
        "kind": "POSITIONAL_ONLY",
        "default": {
          "value": "empty",
          "type": "str"
        },
        "type": "any"
      }
    ],
    "docs": "Queue right click action.\n\n    :param xy: (y * 65536) + x, where (x, y) is coordinate for right click.\n    "
  },
  {
    "name": "QueueGameCommand_RestartGame",
    "args": [],
    "docs": ""
  },
  {
    "name": "QueueGameCommand_ResumeGame",
    "args": [],
    "docs": ""
  },
  {
    "name": "QueueGameCommand_RightClick",
    "args": [
      {
        "name": "xy",
        "kind": "POSITIONAL_ONLY",
        "default": {
          "value": "empty",
          "type": "str"
        },
        "type": "any"
      }
    ],
    "docs": "Queue right click action.\n\n    :param xy: (y * 65536) + x, where (x, y) is coordinate for right click.\n    "
  },
  {
    "name": "QueueGameCommand_Select",
    "args": [
      {
        "name": "n",
        "kind": "POSITIONAL_ONLY",
        "default": {
          "value": "empty",
          "type": "str"
        },
        "type": "any"
      },
      {
        "name": "ptrList",
        "kind": "POSITIONAL_ONLY",
        "default": {
          "value": "empty",
          "type": "str"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "QueueGameCommand_TrainUnit",
    "args": [
      {
        "name": "unit",
        "kind": "POSITIONAL_ONLY",
        "default": {
          "value": "empty",
          "type": "str"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "QueueGameCommand_UseCheat",
    "args": [
      {
        "name": "flags",
        "kind": "POSITIONAL_ONLY",
        "default": {
          "value": "empty",
          "type": "str"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "RandList",
    "args": [
      {
        "name": "lst",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "RegisterCreatePayloadCallback",
    "args": [
      {
        "name": "f",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "RemoveUnit",
    "args": [
      {
        "name": "Unit",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgUnit"
      },
      {
        "name": "Player",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgPlayer"
      }
    ],
    "docs": ""
  },
  {
    "name": "RemoveUnitAt",
    "args": [
      {
        "name": "Count",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "Unit",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgUnit"
      },
      {
        "name": "Where",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgLocation"
      },
      {
        "name": "ForPlayer",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgPlayer"
      }
    ],
    "docs": ""
  },
  {
    "name": "RlocInt",
    "args": [
      {
        "name": "offset",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "rlocmode",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "RunAIScript",
    "args": [
      {
        "name": "Script",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "RunAIScriptAt",
    "args": [
      {
        "name": "Script",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "Where",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgLocation"
      }
    ],
    "docs": ""
  },
  {
    "name": "RunTrigTrigger",
    "args": [],
    "docs": ""
  },
  {
    "name": "SCMD2Text",
    "args": [
      {
        "name": "s",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgResource"
      }
    ],
    "docs": ""
  },
  {
    "name": "SaveMap",
    "args": [
      {
        "name": "fname",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "rootf",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "sectorSize",
        "kind": "KEYWORD_ONLY",
        "default": {
          "value": "None",
          "type": "NoneType"
        },
        "type": "any"
      }
    ],
    "docs": "Save output map with root function.\n\n    :param fname: Path for output map.\n    :param rootf: Main entry function.\n    "
  },
  {
    "name": "Score",
    "args": [
      {
        "name": "Player",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgPlayer"
      },
      {
        "name": "ScoreType",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgScore"
      },
      {
        "name": "Comparison",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgComparison"
      },
      {
        "name": "Number",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "SeqCompute",
    "args": [
      {
        "name": "assignpairs",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "SetAllianceStatus",
    "args": [
      {
        "name": "Player",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgPlayer"
      },
      {
        "name": "Status",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "SetCountdownTimer",
    "args": [
      {
        "name": "TimeModifier",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgModifier"
      },
      {
        "name": "Time",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "SetCurrentPlayer",
    "args": [
      {
        "name": "p",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgOrder"
      }
    ],
    "docs": ""
  },
  {
    "name": "SetDeaths",
    "args": [
      {
        "name": "Player",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgPlayer"
      },
      {
        "name": "Modifier",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgModifier"
      },
      {
        "name": "Number",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "Unit",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgUnit"
      }
    ],
    "docs": ""
  },
  {
    "name": "SetDeathsX",
    "args": [
      {
        "name": "Player",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgPlayer"
      },
      {
        "name": "Modifier",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgModifier"
      },
      {
        "name": "Number",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "Unit",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgUnit"
      },
      {
        "name": "Mask",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "SetDoodadState",
    "args": [
      {
        "name": "State",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "Unit",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgUnit"
      },
      {
        "name": "Owner",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgPlayer"
      },
      {
        "name": "Where",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgLocation"
      }
    ],
    "docs": ""
  },
  {
    "name": "SetInvincibility",
    "args": [
      {
        "name": "State",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "Unit",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgUnit"
      },
      {
        "name": "Owner",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgPlayer"
      },
      {
        "name": "Where",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgLocation"
      }
    ],
    "docs": ""
  },
  {
    "name": "SetKills",
    "args": [
      {
        "name": "Player",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgPlayer"
      },
      {
        "name": "Modifier",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgModifier"
      },
      {
        "name": "Number",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "Unit",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgUnit"
      }
    ],
    "docs": ""
  },
  {
    "name": "SetMemory",
    "args": [
      {
        "name": "dest",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "modtype",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgModifier"
      },
      {
        "name": "value",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "SetMemoryEPD",
    "args": [
      {
        "name": "dest",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "modtype",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgModifier"
      },
      {
        "name": "value",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "SetMemoryX",
    "args": [
      {
        "name": "dest",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "modtype",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgModifier"
      },
      {
        "name": "value",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "mask",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "SetMemoryXEPD",
    "args": [
      {
        "name": "epd",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "modtype",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgModifier"
      },
      {
        "name": "value",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "mask",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "SetMissionObjectives",
    "args": [
      {
        "name": "Text",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "SetMissionObjectivesAll",
    "args": [
      {
        "name": "text",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": "Action: SetMissionObjectives for everyone (including observers)"
  },
  {
    "name": "SetNextPtr",
    "args": [
      {
        "name": "trg",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "dest",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "SetNextScenario",
    "args": [
      {
        "name": "ScenarioName",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "SetNextTrigger",
    "args": [
      {
        "name": "trg",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": " For optimization purpose, one may call this function directly "
  },
  {
    "name": "SetPName",
    "args": [
      {
        "name": "player",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "name",
        "kind": "VAR_POSITIONAL",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "SetPNamef",
    "args": [
      {
        "name": "player",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "format_string",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "args",
        "kind": "VAR_POSITIONAL",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "SetResources",
    "args": [
      {
        "name": "Player",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgPlayer"
      },
      {
        "name": "Modifier",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgModifier"
      },
      {
        "name": "Amount",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "ResourceType",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgResource"
      }
    ],
    "docs": ""
  },
  {
    "name": "SetScore",
    "args": [
      {
        "name": "Player",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgPlayer"
      },
      {
        "name": "Modifier",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgModifier"
      },
      {
        "name": "Amount",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "ScoreType",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgScore"
      }
    ],
    "docs": ""
  },
  {
    "name": "SetSwitch",
    "args": [
      {
        "name": "Switch",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "State",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "SetVariables",
    "args": [
      {
        "name": "srclist",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "dstlist",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "mdtlist",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "None",
          "type": "NoneType"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "ShufflePayload",
    "args": [
      {
        "name": "mode",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": "Set payload shuffle mode.\n\n    :param mode: If true, enable object shuffling (compression). If false,\n    disable it.\n    "
  },
  {
    "name": "Switch",
    "args": [
      {
        "name": "Switch",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "State",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "TalkingPortrait",
    "args": [
      {
        "name": "Unit",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgUnit"
      },
      {
        "name": "Time",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "TalkingPortraitAll",
    "args": [
      {
        "name": "unit",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgUnit"
      },
      {
        "name": "time",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": "Action: TalkingPortrait for everyone (including observers)"
  },
  {
    "name": "TextFX_FadeIn",
    "args": [
      {
        "name": "args",
        "kind": "VAR_POSITIONAL",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "color",
        "kind": "KEYWORD_ONLY",
        "default": {
          "value": "None",
          "type": "NoneType"
        },
        "type": "any"
      },
      {
        "name": "wait",
        "kind": "KEYWORD_ONLY",
        "default": {
          "value": "1",
          "type": "int"
        },
        "type": "any"
      },
      {
        "name": "reset",
        "kind": "KEYWORD_ONLY",
        "default": {
          "value": "True",
          "type": "bool"
        },
        "type": "any"
      },
      {
        "name": "tag",
        "kind": "KEYWORD_ONLY",
        "default": {
          "value": "None",
          "type": "NoneType"
        },
        "type": "any"
      },
      {
        "name": "encoding",
        "kind": "KEYWORD_ONLY",
        "default": {
          "value": "UTF-8",
          "type": "str"
        },
        "type": "any"
      }
    ],
    "docs": "Print multiple string / number and apply color from Left To Right\n\n    Keyword arguments:\n    color -- tuple of color codes (default 0x03, 0x04, 0x05, 0x14)\n    wait  -- time interval between effect (default 1)\n    reset -- automatically reset when didn't run for a moment (default True)\n    tag   -- internal tag and identifier (default: vargs)\n    "
  },
  {
    "name": "TextFX_FadeOut",
    "args": [
      {
        "name": "args",
        "kind": "VAR_POSITIONAL",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "color",
        "kind": "KEYWORD_ONLY",
        "default": {
          "value": "None",
          "type": "NoneType"
        },
        "type": "any"
      },
      {
        "name": "wait",
        "kind": "KEYWORD_ONLY",
        "default": {
          "value": "1",
          "type": "int"
        },
        "type": "any"
      },
      {
        "name": "reset",
        "kind": "KEYWORD_ONLY",
        "default": {
          "value": "True",
          "type": "bool"
        },
        "type": "any"
      },
      {
        "name": "tag",
        "kind": "KEYWORD_ONLY",
        "default": {
          "value": "None",
          "type": "NoneType"
        },
        "type": "any"
      },
      {
        "name": "encoding",
        "kind": "KEYWORD_ONLY",
        "default": {
          "value": "UTF-8",
          "type": "str"
        },
        "type": "any"
      }
    ],
    "docs": "Print multiple string / number and apply color from Left To Right\n\n    Keyword arguments:\n    color -- tuple of color codes (default 0x03, 0x04, 0x05, 0x14)\n    wait  -- time interval between effect (default 1)\n    reset -- automatically reset when didn't run for a moment (default True)\n    tag   -- internal tag and identifier (default: vargs)\n    "
  },
  {
    "name": "TextFX_Remove",
    "args": [
      {
        "name": "tag",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "TextFX_SetTimer",
    "args": [
      {
        "name": "tag",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "modtype",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgModifier"
      },
      {
        "name": "value",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "Transmission",
    "args": [
      {
        "name": "Unit",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgUnit"
      },
      {
        "name": "Where",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgLocation"
      },
      {
        "name": "WAVName",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "TimeModifier",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgModifier"
      },
      {
        "name": "Time",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "Text",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "AlwaysDisplay",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "4",
          "type": "int"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "TrigTriggerBegin",
    "args": [
      {
        "name": "player",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "TrigTriggerEnd",
    "args": [
      {
        "name": "player",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "Trigger",
    "args": [
      {
        "name": "conditions",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "None",
          "type": "NoneType"
        },
        "type": "any"
      },
      {
        "name": "actions",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "None",
          "type": "NoneType"
        },
        "type": "any"
      },
      {
        "name": "preserved",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "True",
          "type": "bool"
        },
        "type": "any"
      }
    ],
    "docs": "General easy-to-use trigger\n\n    :param conditions: List of conditions. If there are none, trigger will\n        always execute.\n    :param actions: List of actions. If there are none, trigger will have no\n        actions.\n    :param preserved: Is trigger preserved? True by default.\n\n    .. note::\n        This is 'extended' trigger. All conditions and variables can contain\n        `EUDVariable` object, and there may be more than 16 conditions and 64\n        actions. Trigger internally uses `RawTrigger`.\n    "
  },
  {
    "name": "UnMuteUnitSpeech",
    "args": [],
    "docs": ""
  },
  {
    "name": "UnpauseGame",
    "args": [],
    "docs": ""
  },
  {
    "name": "UnpauseTimer",
    "args": [],
    "docs": ""
  },
  {
    "name": "VProc",
    "args": [
      {
        "name": "v",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "actions",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "Victory",
    "args": [],
    "docs": ""
  },
  {
    "name": "Wait",
    "args": [
      {
        "name": "Time",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "b2i1",
    "args": [
      {
        "name": "b",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "index",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "0",
          "type": "int"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "b2i2",
    "args": [
      {
        "name": "b",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "index",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "0",
          "type": "int"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "b2i4",
    "args": [
      {
        "name": "b",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "index",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "0",
          "type": "int"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "b2u",
    "args": [
      {
        "name": "b",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "bits",
    "args": [
      {
        "name": "n",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgUnit"
      }
    ],
    "docs": ""
  },
  {
    "name": "cachedfunc",
    "args": [
      {
        "name": "function",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "createEncoder",
    "args": [
      {
        "name": "f",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "ep_assert",
    "args": [
      {
        "name": "statement",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "message",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "Assertion failed",
          "type": "str"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "ep_eprint",
    "args": [
      {
        "name": "args",
        "kind": "VAR_POSITIONAL",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "kwargs",
        "kind": "VAR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "ep_warn",
    "args": [
      {
        "name": "message",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "epsCompile",
    "args": [
      {
        "name": "filename",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "bCode",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "eudplibVersion",
    "args": [],
    "docs": ""
  },
  {
    "name": "f_addcurpl",
    "args": [
      {
        "name": "cp",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": "Add current player value.\n\n    eudplib internally caches the current player value,\n    so this function add to that value.\n    "
  },
  {
    "name": "f_addloc",
    "args": [
      {
        "name": "locID",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "coords",
        "kind": "VAR_POSITIONAL",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "f_atan2",
    "args": [
      {
        "name": "y",
        "kind": "POSITIONAL_ONLY",
        "default": {
          "value": "empty",
          "type": "str"
        },
        "type": "any"
      },
      {
        "name": "x",
        "kind": "POSITIONAL_ONLY",
        "default": {
          "value": "empty",
          "type": "str"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "f_bitand",
    "args": [
      {
        "name": "a",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "b",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": "Calculate a & b"
  },
  {
    "name": "f_bitlshift",
    "args": [
      {
        "name": "a",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "b",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "_fdict",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "{}",
          "type": "dict"
        },
        "type": "any"
      },
      {
        "name": "kwargs",
        "kind": "VAR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": "Calculate a << b"
  },
  {
    "name": "f_bitnand",
    "args": [
      {
        "name": "a",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "b",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": "Calculate ~(a & b)"
  },
  {
    "name": "f_bitnor",
    "args": [
      {
        "name": "a",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "b",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": "Calculate ~(a | b)"
  },
  {
    "name": "f_bitnot",
    "args": [
      {
        "name": "a",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": "Calculate ~a"
  },
  {
    "name": "f_bitnxor",
    "args": [
      {
        "name": "a",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "b",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": "Calculate ~(a ^ b)"
  },
  {
    "name": "f_bitor",
    "args": [
      {
        "name": "a",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "b",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": "Calculate a | b"
  },
  {
    "name": "f_bitrshift",
    "args": [
      {
        "name": "a",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "b",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": "Calculate a >> b"
  },
  {
    "name": "f_bitsplit",
    "args": [
      {
        "name": "a",
        "kind": "POSITIONAL_ONLY",
        "default": {
          "value": "empty",
          "type": "str"
        },
        "type": "any"
      }
    ],
    "docs": "Splits bit of given number\n\n    :returns: int bits[32];  // bits[i] = (ith bit from LSB of a is set)\n    "
  },
  {
    "name": "f_bitxor",
    "args": [
      {
        "name": "a",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "b",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": "Calculate a ^ b"
  },
  {
    "name": "f_blockpatch_epd",
    "args": [
      {
        "name": "dstepd",
        "kind": "POSITIONAL_ONLY",
        "default": {
          "value": "empty",
          "type": "str"
        },
        "type": "any"
      },
      {
        "name": "srcepd",
        "kind": "POSITIONAL_ONLY",
        "default": {
          "value": "empty",
          "type": "str"
        },
        "type": "any"
      },
      {
        "name": "dwn",
        "kind": "POSITIONAL_ONLY",
        "default": {
          "value": "empty",
          "type": "str"
        },
        "type": "any"
      }
    ],
    "docs": " Patch 4*dwn bytes of memory at dstepd with memory of srcepd.\n\n    .. note::\n        After calling this function, contents at srcepd memory may change.\n        Since new contents are required for :py:`f_unpatchall` to run, you\n        shouldn't use the memory for any other means.\n    "
  },
  {
    "name": "f_bread",
    "args": [
      {
        "name": "ptr",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "f_bread_cp",
    "args": [
      {
        "name": "cpo",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "subp",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "kwargs",
        "kind": "VAR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "f_bread_epd",
    "args": [
      {
        "name": "epd",
        "kind": "POSITIONAL_ONLY",
        "default": {
          "value": "empty",
          "type": "str"
        },
        "type": "any"
      },
      {
        "name": "subp",
        "kind": "POSITIONAL_ONLY",
        "default": {
          "value": "empty",
          "type": "str"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "f_bwrite",
    "args": [
      {
        "name": "ptr",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "b",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "f_bwrite_cp",
    "args": [
      {
        "name": "cpo",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "subp",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "b",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "f_bwrite_epd",
    "args": [
      {
        "name": "epd",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "subp",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "b",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "f_cp949_to_utf8_cpy",
    "args": [
      {
        "name": "dst",
        "kind": "POSITIONAL_ONLY",
        "default": {
          "value": "empty",
          "type": "str"
        },
        "type": "any"
      },
      {
        "name": "src",
        "kind": "POSITIONAL_ONLY",
        "default": {
          "value": "empty",
          "type": "str"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "f_cpchar_adddw",
    "args": [
      {
        "name": "number",
        "kind": "POSITIONAL_ONLY",
        "default": {
          "value": "empty",
          "type": "str"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "f_cpchar_print",
    "args": [
      {
        "name": "args",
        "kind": "VAR_POSITIONAL",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "EOS",
        "kind": "KEYWORD_ONLY",
        "default": {
          "value": "True",
          "type": "bool"
        },
        "type": "any"
      },
      {
        "name": "encoding",
        "kind": "KEYWORD_ONLY",
        "default": {
          "value": "UTF-8",
          "type": "str"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "f_cpstr_adddw",
    "args": [
      {
        "name": "number",
        "kind": "POSITIONAL_ONLY",
        "default": {
          "value": "empty",
          "type": "str"
        },
        "type": "any"
      }
    ],
    "docs": "Print number as string to CurrentPlayer.\n\n    :param number: DWORD to print\n    "
  },
  {
    "name": "f_cpstr_addptr",
    "args": [
      {
        "name": "number",
        "kind": "POSITIONAL_ONLY",
        "default": {
          "value": "empty",
          "type": "str"
        },
        "type": "any"
      }
    ],
    "docs": "Print number as string to CurrentPlayer.\n\n    :param number: DWORD to print\n    "
  },
  {
    "name": "f_cpstr_print",
    "args": [
      {
        "name": "args",
        "kind": "VAR_POSITIONAL",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "EOS",
        "kind": "KEYWORD_ONLY",
        "default": {
          "value": "True",
          "type": "bool"
        },
        "type": "any"
      },
      {
        "name": "encoding",
        "kind": "KEYWORD_ONLY",
        "default": {
          "value": "UTF-8",
          "type": "str"
        },
        "type": "any"
      }
    ],
    "docs": "Print multiple string / number to CurrentPlayer.\n\n    :param args: Things to print\n\n    "
  },
  {
    "name": "f_cunitepdread_cp",
    "args": [
      {
        "name": "cpo",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "kwargs",
        "kind": "VAR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "f_cunitepdread_epd",
    "args": [
      {
        "name": "targetplayer",
        "kind": "POSITIONAL_ONLY",
        "default": {
          "value": "empty",
          "type": "str"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "f_cunitread_cp",
    "args": [
      {
        "name": "cpo",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "kwargs",
        "kind": "VAR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "f_cunitread_epd",
    "args": [
      {
        "name": "targetplayer",
        "kind": "POSITIONAL_ONLY",
        "default": {
          "value": "empty",
          "type": "str"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "f_dbstr_adddw",
    "args": [
      {
        "name": "dst",
        "kind": "POSITIONAL_ONLY",
        "default": {
          "value": "empty",
          "type": "str"
        },
        "type": "any"
      },
      {
        "name": "number",
        "kind": "POSITIONAL_ONLY",
        "default": {
          "value": "empty",
          "type": "str"
        },
        "type": "any"
      }
    ],
    "docs": "Print number as string to dst.\n\n    :param dst: Destination address (Not EPD player)\n    :param number: DWORD to print\n\n    :returns: dst + strlen(itoa(number))\n    "
  },
  {
    "name": "f_dbstr_addptr",
    "args": [
      {
        "name": "dst",
        "kind": "POSITIONAL_ONLY",
        "default": {
          "value": "empty",
          "type": "str"
        },
        "type": "any"
      },
      {
        "name": "number",
        "kind": "POSITIONAL_ONLY",
        "default": {
          "value": "empty",
          "type": "str"
        },
        "type": "any"
      }
    ],
    "docs": "Print number as string to dst.\n\n    :param dst: Destination address (Not EPD player)\n    :param number: DWORD to print\n\n    :returns: dst + strlen(itoa(number))\n    "
  },
  {
    "name": "f_dbstr_addstr",
    "args": [
      {
        "name": "dst",
        "kind": "POSITIONAL_ONLY",
        "default": {
          "value": "empty",
          "type": "str"
        },
        "type": "any"
      },
      {
        "name": "src",
        "kind": "POSITIONAL_ONLY",
        "default": {
          "value": "empty",
          "type": "str"
        },
        "type": "any"
      }
    ],
    "docs": "Print string as string to dst. Same as strcpy except of return value.\n\n    :param dst: Destination address (Not EPD player)\n    :param src: Source address (Not EPD player)\n\n    :returns: dst + strlen(src)\n    "
  },
  {
    "name": "f_dbstr_addstr_epd",
    "args": [
      {
        "name": "dst",
        "kind": "POSITIONAL_ONLY",
        "default": {
          "value": "empty",
          "type": "str"
        },
        "type": "any"
      },
      {
        "name": "epd",
        "kind": "POSITIONAL_ONLY",
        "default": {
          "value": "empty",
          "type": "str"
        },
        "type": "any"
      }
    ],
    "docs": "Print string as string to dst. Same as strcpy except of return value.\n\n    :param dst: Destination address (Not EPD player)\n    :param epd: Source EPD player\n\n    :returns: dst + strlen_epd(epd)\n    "
  },
  {
    "name": "f_dbstr_print",
    "args": [
      {
        "name": "dst",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "args",
        "kind": "VAR_POSITIONAL",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "EOS",
        "kind": "KEYWORD_ONLY",
        "default": {
          "value": "True",
          "type": "bool"
        },
        "type": "any"
      },
      {
        "name": "encoding",
        "kind": "KEYWORD_ONLY",
        "default": {
          "value": "UTF-8",
          "type": "str"
        },
        "type": "any"
      }
    ],
    "docs": "Print multiple string / number to dst.\n\n    :param dst: Destination address (Not EPD player)\n    :param args: Things to print\n\n    "
  },
  {
    "name": "f_dilateloc",
    "args": [
      {
        "name": "locID",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "coords",
        "kind": "VAR_POSITIONAL",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "f_div",
    "args": [
      {
        "name": "a",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "b",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "kwargs",
        "kind": "VAR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": "Calculate (a//b, a%b)"
  },
  {
    "name": "f_dwadd_cp",
    "args": [
      {
        "name": "cpo",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "value",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "f_dwadd_epd",
    "args": [
      {
        "name": "targetplayer",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "value",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "f_dwbreak",
    "args": [
      {
        "name": "number",
        "kind": "POSITIONAL_ONLY",
        "default": {
          "value": "empty",
          "type": "str"
        },
        "type": "any"
      }
    ],
    "docs": "Get hiword/loword/4byte of dword"
  },
  {
    "name": "f_dwbreak2",
    "args": [
      {
        "name": "number",
        "kind": "POSITIONAL_ONLY",
        "default": {
          "value": "empty",
          "type": "str"
        },
        "type": "any"
      }
    ],
    "docs": "Get hiword/loword/4byte of dword"
  },
  {
    "name": "f_dwepdread_cp",
    "args": [
      {
        "name": "cpo",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "kwargs",
        "kind": "VAR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "f_dwepdread_epd",
    "args": [
      {
        "name": "targetplayer",
        "kind": "POSITIONAL_ONLY",
        "default": {
          "value": "empty",
          "type": "str"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "f_dwepdread_epd_safe",
    "args": [
      {
        "name": "args",
        "kind": "VAR_POSITIONAL",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "kwargs",
        "kind": "VAR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "f_dwpatch_epd",
    "args": [
      {
        "name": "dstepd",
        "kind": "POSITIONAL_ONLY",
        "default": {
          "value": "empty",
          "type": "str"
        },
        "type": "any"
      },
      {
        "name": "value",
        "kind": "POSITIONAL_ONLY",
        "default": {
          "value": "empty",
          "type": "str"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "f_dwrand",
    "args": [],
    "docs": ""
  },
  {
    "name": "f_dwread",
    "args": [
      {
        "name": "ptr",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "f_dwread_cp",
    "args": [
      {
        "name": "cpo",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "kwargs",
        "kind": "VAR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "f_dwread_epd",
    "args": [
      {
        "name": "targetplayer",
        "kind": "POSITIONAL_ONLY",
        "default": {
          "value": "empty",
          "type": "str"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "f_dwread_epd_safe",
    "args": [
      {
        "name": "args",
        "kind": "VAR_POSITIONAL",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "kwargs",
        "kind": "VAR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "f_dwsubtract_cp",
    "args": [
      {
        "name": "cpo",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "value",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "f_dwsubtract_epd",
    "args": [
      {
        "name": "targetplayer",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "value",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "f_dwwrite",
    "args": [
      {
        "name": "ptr",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "dw",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "f_dwwrite_cp",
    "args": [
      {
        "name": "cpo",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "value",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "f_dwwrite_epd",
    "args": [
      {
        "name": "targetplayer",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "value",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "f_epdcunitread_cp",
    "args": [
      {
        "name": "cpo",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "kwargs",
        "kind": "VAR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "f_epdcunitread_epd",
    "args": [
      {
        "name": "targetplayer",
        "kind": "POSITIONAL_ONLY",
        "default": {
          "value": "empty",
          "type": "str"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "f_epdread_cp",
    "args": [
      {
        "name": "cpo",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "kwargs",
        "kind": "VAR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "f_epdread_epd",
    "args": [
      {
        "name": "targetplayer",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "f_epdread_epd_safe",
    "args": [
      {
        "name": "args",
        "kind": "VAR_POSITIONAL",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "kwargs",
        "kind": "VAR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "f_epdspriteread_cp",
    "args": [
      {
        "name": "cpo",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "kwargs",
        "kind": "VAR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "f_epdspriteread_epd",
    "args": [
      {
        "name": "targetplayer",
        "kind": "POSITIONAL_ONLY",
        "default": {
          "value": "empty",
          "type": "str"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "f_eprintAll",
    "args": [
      {
        "name": "format_string",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "args",
        "kind": "VAR_POSITIONAL",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "f_eprintf",
    "args": [
      {
        "name": "format_string",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "args",
        "kind": "VAR_POSITIONAL",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "f_eprintln",
    "args": [
      {
        "name": "args",
        "kind": "VAR_POSITIONAL",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "f_eprintln2",
    "args": [
      {
        "name": "args",
        "kind": "VAR_POSITIONAL",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "f_flagread_epd",
    "args": [
      {
        "name": "targetplayer",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "flags",
        "kind": "VAR_POSITIONAL",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "_readerdict",
        "kind": "KEYWORD_ONLY",
        "default": {
          "value": "{}",
          "type": "dict"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "f_getcurpl",
    "args": [],
    "docs": "Get current player value.\n\n    eudplib internally caches the current player value, so this function uses\n    that value if the value is valid. Otherwise, update the current player\n    cache and return it.\n    "
  },
  {
    "name": "f_getgametick",
    "args": [],
    "docs": "Get current game tick value."
  },
  {
    "name": "f_getlocTL",
    "args": [
      {
        "name": "locID",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "kwargs",
        "kind": "VAR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": "\n    \ub85c\ucf00\uc774\uc158\uc758 \uc704(top), \uc67c\ucabd (left) \uc88c\ud45c\ub97c \uc5bb\uc5b4\ub0c5\ub2c8\ub2e4.\n    @param  {[type]} locID \ub85c\ucf00\uc774\uc158 \ubc88\ud638. $L(\ub85c\ucf00\uc774\uc158 \uc774\ub984) \uc73c\ub85c \uc5bb\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n    "
  },
  {
    "name": "f_getseed",
    "args": [],
    "docs": ""
  },
  {
    "name": "f_gettextptr",
    "args": [],
    "docs": ""
  },
  {
    "name": "f_getuserplayerid",
    "args": [],
    "docs": ""
  },
  {
    "name": "f_lengthdir",
    "args": [
      {
        "name": "length",
        "kind": "POSITIONAL_ONLY",
        "default": {
          "value": "empty",
          "type": "str"
        },
        "type": "any"
      },
      {
        "name": "angle",
        "kind": "POSITIONAL_ONLY",
        "default": {
          "value": "empty",
          "type": "str"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "f_maskread_cp",
    "args": [
      {
        "name": "cpoffset",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "mask",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "_fdict",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "{}",
          "type": "dict"
        },
        "type": "any"
      },
      {
        "name": "kwargs",
        "kind": "VAR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "f_maskread_epd",
    "args": [
      {
        "name": "targetplayer",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "mask",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "_fdict",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "{}",
          "type": "dict"
        },
        "type": "any"
      },
      {
        "name": "kwargs",
        "kind": "VAR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "f_maskwrite_cp",
    "args": [
      {
        "name": "cpo",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "value",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "mask",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "f_maskwrite_epd",
    "args": [
      {
        "name": "epd",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "value",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "mask",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "f_memcmp",
    "args": [
      {
        "name": "buf1",
        "kind": "POSITIONAL_ONLY",
        "default": {
          "value": "empty",
          "type": "str"
        },
        "type": "any"
      },
      {
        "name": "buf2",
        "kind": "POSITIONAL_ONLY",
        "default": {
          "value": "empty",
          "type": "str"
        },
        "type": "any"
      },
      {
        "name": "count",
        "kind": "POSITIONAL_ONLY",
        "default": {
          "value": "empty",
          "type": "str"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "f_memcpy",
    "args": [
      {
        "name": "dst",
        "kind": "POSITIONAL_ONLY",
        "default": {
          "value": "empty",
          "type": "str"
        },
        "type": "any"
      },
      {
        "name": "src",
        "kind": "POSITIONAL_ONLY",
        "default": {
          "value": "empty",
          "type": "str"
        },
        "type": "any"
      },
      {
        "name": "copylen",
        "kind": "POSITIONAL_ONLY",
        "default": {
          "value": "empty",
          "type": "str"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "f_mul",
    "args": [
      {
        "name": "a",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "b",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "kwargs",
        "kind": "VAR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": "Calculate a * b"
  },
  {
    "name": "f_parse",
    "args": [
      {
        "name": "dst",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "radix",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "10",
          "type": "int"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "f_playerexist",
    "args": [
      {
        "name": "player",
        "kind": "POSITIONAL_ONLY",
        "default": {
          "value": "empty",
          "type": "str"
        },
        "type": "any"
      }
    ],
    "docs": "Check if player has not left the game.\n\n    :returns: 1 if player exists, 0 if not.\n    "
  },
  {
    "name": "f_posread_cp",
    "args": [
      {
        "name": "cpoffset",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "kwargs",
        "kind": "VAR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "f_posread_epd",
    "args": [
      {
        "name": "epd",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "kwargs",
        "kind": "VAR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "f_pow",
    "args": [
      {
        "name": "a",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "b",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": "\n    f_pow(a, b) calculates a ** b\n    "
  },
  {
    "name": "f_printAll",
    "args": [
      {
        "name": "format_string",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "args",
        "kind": "VAR_POSITIONAL",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "f_printAllAt",
    "args": [
      {
        "name": "line",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "format_string",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "args",
        "kind": "VAR_POSITIONAL",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "f_printAt",
    "args": [
      {
        "name": "line",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "format_string",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "args",
        "kind": "VAR_POSITIONAL",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "f_println",
    "args": [
      {
        "name": "format_string",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "args",
        "kind": "VAR_POSITIONAL",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "f_raise_CCMU",
    "args": [
      {
        "name": "player",
        "kind": "POSITIONAL_ONLY",
        "default": {
          "value": "empty",
          "type": "str"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "f_rand",
    "args": [],
    "docs": ""
  },
  {
    "name": "f_randomize",
    "args": [],
    "docs": ""
  },
  {
    "name": "f_readgen_cp",
    "args": [
      {
        "name": "mask",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "args",
        "kind": "VAR_POSITIONAL",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "docstring",
        "kind": "KEYWORD_ONLY",
        "default": {
          "value": "None",
          "type": "NoneType"
        },
        "type": "any"
      },
      {
        "name": "_fdict",
        "kind": "KEYWORD_ONLY",
        "default": {
          "value": "{}",
          "type": "dict"
        },
        "type": "any"
      },
      {
        "name": "_check_empty",
        "kind": "KEYWORD_ONLY",
        "default": {
          "value": "False",
          "type": "bool"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "f_readgen_epd",
    "args": [
      {
        "name": "mask",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "args",
        "kind": "VAR_POSITIONAL",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "docstring",
        "kind": "KEYWORD_ONLY",
        "default": {
          "value": "None",
          "type": "NoneType"
        },
        "type": "any"
      },
      {
        "name": "_fdict",
        "kind": "KEYWORD_ONLY",
        "default": {
          "value": "{}",
          "type": "dict"
        },
        "type": "any"
      },
      {
        "name": "_check_empty",
        "kind": "KEYWORD_ONLY",
        "default": {
          "value": "False",
          "type": "bool"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "f_repmovsd_epd",
    "args": [
      {
        "name": "dstepdp",
        "kind": "POSITIONAL_ONLY",
        "default": {
          "value": "empty",
          "type": "str"
        },
        "type": "any"
      },
      {
        "name": "srcepdp",
        "kind": "POSITIONAL_ONLY",
        "default": {
          "value": "empty",
          "type": "str"
        },
        "type": "any"
      },
      {
        "name": "copydwn",
        "kind": "POSITIONAL_ONLY",
        "default": {
          "value": "empty",
          "type": "str"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "f_setcurpl",
    "args": [
      {
        "name": "cp",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "actions",
        "kind": "KEYWORD_ONLY",
        "default": {
          "value": "[]",
          "type": "list"
        },
        "type": "any"
      },
      {
        "name": "set_modifier",
        "kind": "KEYWORD_ONLY",
        "default": {
          "value": "True",
          "type": "bool"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "f_setcurpl2cpcache",
    "args": [
      {
        "name": "v",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "[]",
          "type": "list"
        },
        "type": "any"
      },
      {
        "name": "actions",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "[]",
          "type": "list"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "f_setloc",
    "args": [
      {
        "name": "locID",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "coords",
        "kind": "VAR_POSITIONAL",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "f_setloc_epd",
    "args": [
      {
        "name": "locID",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "epd",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "f_settbl",
    "args": [
      {
        "name": "tblID",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "offset",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "args",
        "kind": "VAR_POSITIONAL",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "encoding",
        "kind": "KEYWORD_ONLY",
        "default": {
          "value": "cp949",
          "type": "str"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "f_settbl2",
    "args": [
      {
        "name": "tblID",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "offset",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "args",
        "kind": "VAR_POSITIONAL",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "encoding",
        "kind": "KEYWORD_ONLY",
        "default": {
          "value": "cp949",
          "type": "str"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "f_settblf",
    "args": [
      {
        "name": "tblID",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "offset",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "format_string",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "args",
        "kind": "VAR_POSITIONAL",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "encoding",
        "kind": "KEYWORD_ONLY",
        "default": {
          "value": "cp949",
          "type": "str"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "f_settblf2",
    "args": [
      {
        "name": "tblID",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "offset",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "format_string",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "args",
        "kind": "VAR_POSITIONAL",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "encoding",
        "kind": "KEYWORD_ONLY",
        "default": {
          "value": "cp949",
          "type": "str"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "f_simpleprint",
    "args": [
      {
        "name": "args",
        "kind": "VAR_POSITIONAL",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "spaced",
        "kind": "KEYWORD_ONLY",
        "default": {
          "value": "True",
          "type": "bool"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "f_sprintf",
    "args": [
      {
        "name": "dst",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "format_string",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "args",
        "kind": "VAR_POSITIONAL",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "EOS",
        "kind": "KEYWORD_ONLY",
        "default": {
          "value": "True",
          "type": "bool"
        },
        "type": "any"
      },
      {
        "name": "encoding",
        "kind": "KEYWORD_ONLY",
        "default": {
          "value": "UTF-8",
          "type": "str"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "f_sprintf_cp",
    "args": [
      {
        "name": "format_string",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "args",
        "kind": "VAR_POSITIONAL",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "EOS",
        "kind": "KEYWORD_ONLY",
        "default": {
          "value": "True",
          "type": "bool"
        },
        "type": "any"
      },
      {
        "name": "encoding",
        "kind": "KEYWORD_ONLY",
        "default": {
          "value": "UTF-8",
          "type": "str"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "f_spriteepdread_cp",
    "args": [
      {
        "name": "cpo",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "kwargs",
        "kind": "VAR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "f_spriteepdread_epd",
    "args": [
      {
        "name": "targetplayer",
        "kind": "POSITIONAL_ONLY",
        "default": {
          "value": "empty",
          "type": "str"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "f_spriteread_cp",
    "args": [
      {
        "name": "cpoffset",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "f_spriteread_epd",
    "args": [
      {
        "name": "epd",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "f_sqrt",
    "args": [
      {
        "name": "n",
        "kind": "POSITIONAL_ONLY",
        "default": {
          "value": "empty",
          "type": "str"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "f_srand",
    "args": [
      {
        "name": "seed",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "f_strcmp",
    "args": [
      {
        "name": "s1",
        "kind": "POSITIONAL_ONLY",
        "default": {
          "value": "empty",
          "type": "str"
        },
        "type": "any"
      },
      {
        "name": "s2",
        "kind": "POSITIONAL_ONLY",
        "default": {
          "value": "empty",
          "type": "str"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "f_strcpy",
    "args": [
      {
        "name": "dst",
        "kind": "POSITIONAL_ONLY",
        "default": {
          "value": "empty",
          "type": "str"
        },
        "type": "any"
      },
      {
        "name": "src",
        "kind": "POSITIONAL_ONLY",
        "default": {
          "value": "empty",
          "type": "str"
        },
        "type": "any"
      }
    ],
    "docs": "\n    Strcpy equivilant in eudplib. Copy C-style string.\n\n    :param dst: Destination address (Not EPD player)\n    :param src: Source address (Not EPD player)\n\n    :return: dst\n    "
  },
  {
    "name": "f_strlen",
    "args": [
      {
        "name": "src",
        "kind": "POSITIONAL_ONLY",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "kwargs",
        "kind": "VAR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "f_strlen_epd",
    "args": [
      {
        "name": "epd",
        "kind": "POSITIONAL_ONLY",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "subp",
        "kind": "POSITIONAL_ONLY",
        "default": {
          "value": "0",
          "type": "int"
        },
        "type": "any"
      },
      {
        "name": "kwargs",
        "kind": "VAR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "f_strnstr",
    "args": [
      {
        "name": "string",
        "kind": "POSITIONAL_ONLY",
        "default": {
          "value": "empty",
          "type": "str"
        },
        "type": "any"
      },
      {
        "name": "substring",
        "kind": "POSITIONAL_ONLY",
        "default": {
          "value": "empty",
          "type": "str"
        },
        "type": "any"
      },
      {
        "name": "count",
        "kind": "POSITIONAL_ONLY",
        "default": {
          "value": "empty",
          "type": "str"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "f_unpatchall",
    "args": [],
    "docs": ""
  },
  {
    "name": "f_wread",
    "args": [
      {
        "name": "ptr",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "f_wread_cp",
    "args": [
      {
        "name": "cpo",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "subp",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "kwargs",
        "kind": "VAR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "f_wread_epd",
    "args": [
      {
        "name": "epd",
        "kind": "POSITIONAL_ONLY",
        "default": {
          "value": "empty",
          "type": "str"
        },
        "type": "any"
      },
      {
        "name": "subp",
        "kind": "POSITIONAL_ONLY",
        "default": {
          "value": "empty",
          "type": "str"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "f_wwrite",
    "args": [
      {
        "name": "ptr",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "w",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "f_wwrite_cp",
    "args": [
      {
        "name": "cpo",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "subp",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "w",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "f_wwrite_epd",
    "args": [
      {
        "name": "epd",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "subp",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "w",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "find_data_file",
    "args": [
      {
        "name": "filename",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "file",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "i2b1",
    "args": [
      {
        "name": "i",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgUnit"
      }
    ],
    "docs": ""
  },
  {
    "name": "i2b2",
    "args": [
      {
        "name": "i",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgUnit"
      }
    ],
    "docs": ""
  },
  {
    "name": "i2b4",
    "args": [
      {
        "name": "i",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgUnit"
      }
    ],
    "docs": ""
  },
  {
    "name": "isStrict",
    "args": [],
    "docs": ""
  },
  {
    "name": "isUnproxyInstance",
    "args": [
      {
        "name": "x",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      },
      {
        "name": "cls",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "setEpsGlobals",
    "args": [
      {
        "name": "globalList",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "setStrict",
    "args": [
      {
        "name": "mode",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  },
  {
    "name": "toRlocInt",
    "args": [
      {
        "name": "x",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": "Convert int/RlocInt to rlocint"
  },
  {
    "name": "u2b",
    "args": [
      {
        "name": "s",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgResource"
      }
    ],
    "docs": ""
  },
  {
    "name": "u2utf8",
    "args": [
      {
        "name": "s",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "TrgResource"
      }
    ],
    "docs": ""
  },
  {
    "name": "unProxy",
    "args": [
      {
        "name": "x",
        "kind": "POSITIONAL_OR_KEYWORD",
        "default": {
          "value": "empty",
          "type": "type"
        },
        "type": "any"
      }
    ],
    "docs": ""
  }
]
