[
    {
        "name": "Accumulate",
        "args": [
            {
                "name": "player",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "comparison",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "number",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "resource_type",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": "Player accumulates quantity resources.\n\nAccumulate requires that the player gather enough of a specific resource."
    },
    {
        "name": "AddCurrentPlayer",
        "args": [
            {
                "name": "p",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "TrgOrder"
            }
        ],
        "docs": ""
    },
    {
        "name": "Always",
        "args": [],
        "docs": "Always.\n\nAccumulate requires that the player gather enough of a specific resource."
    },
    {
        "name": "Assignable2List",
        "args": [
            {
                "name": "a",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "Bring",
        "args": [
            {
                "name": "player",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "comparison",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "number",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "unit",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "TrgUnit"
            },
            {
                "name": "location",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "TrgLocation"
            }
        ],
        "docs": "Player brings quantity units to location.\n\nThis states that a player is required to bring 'X' number of units to a\nspecific location. The units can be any player-controlled unit available\nin the game."
    },
    {
        "name": "CenterView",
        "args": [
            {
                "name": "where",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": "Center view for current player at location.\n\nThis action creates the specified number of units at the specified Location\nIf a unit is created 'Anywhere', it will appear in the center of the map.\nThis action will not function while the game is paused.\n\nKeep in mind that when the conditions are successfully met,\nthe unit(s) will be created for each player that owns the trigger.\nFor example, if All Players own a trigger that creates a Terran Marine for\nPlayer 1, and the conditions of the trigger are true for four of the\nplayers, Player 1 will get 4 Marines."
    },
    {
        "name": "CenterViewAll",
        "args": [
            {
                "name": "location",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "TrgLocation"
            }
        ],
        "docs": "Action: CenterView for everyone (including observers)"
    },
    {
        "name": "Command",
        "args": [
            {
                "name": "player",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "comparison",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "number",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "unit",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "TrgUnit"
            }
        ],
        "docs": "[Player] commands [Comparison] [Number] [Unit].\n\nExample::\n    Command(Player1, AtLeast, 30, \"Terran Marine\")"
    },
    {
        "name": "CommandLeast",
        "args": [
            {
                "name": "unit",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "TrgUnit"
            }
        ],
        "docs": "Current player commands the least units.\n\nCommand the Least allows you to define an action based on the player that\ncommands the least units. You might use this to give advantages to slower\nplayers or to single out weakened players. Note that this condition checks\nall players, including neutral, computer controlled, and rescuable players."
    },
    {
        "name": "CommandLeastAt",
        "args": [
            {
                "name": "unit",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "TrgUnit"
            },
            {
                "name": "location",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "TrgLocation"
            }
        ],
        "docs": "Current player commands the least units at location.\n\nCommand the Least At is similar to 'Command the Least', however, but only\ncompares units at a particular location.\nThe location can be restricted to certain elevations."
    },
    {
        "name": "CommandMost",
        "args": [
            {
                "name": "unit",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "TrgUnit"
            }
        ],
        "docs": "Current player commands the most units.\n\nCommand the Most requires that you command the most of the defined units.\nThese units can be any player-controlled unit available in the game.\nThis condition compares all players in the game, including neutral and\nrescuable units."
    },
    {
        "name": "CommandMostAt",
        "args": [
            {
                "name": "unit",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "TrgUnit"
            },
            {
                "name": "location",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "TrgLocation"
            }
        ],
        "docs": "Current player commands the most units at location.\n\nSimilar to the Command the Most, this condition compares\nthe number of units at a specific location.\nThe location can be restricted to certain elevations."
    },
    {
        "name": "Comment",
        "args": [
            {
                "name": "text",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": "Comment: comment.\n\nIf this action exists in a trigger, and is enabled, whatever text is listed\nin the text field will be displayed in the trigger text.\nIf you disable this action, the normal trigger text will be displayed."
    },
    {
        "name": "CompressPayload",
        "args": [
            {
                "name": "mode",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": "Set payload compression mode.\n\n:param mode: If true, enable object stacking (compression). If false,\ndisable it."
    },
    {
        "name": "CountdownTimer",
        "args": [
            {
                "name": "comparison",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "time",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": "Checks countdown timer.\n\nExample::\n\n    CountdownTimer(AtLeast, 10)\n\nMemory Layout::\n\n    0000 0000 0000 0000 TTTT TTTT 0000 CP01 0000\n\n    T : time, CP : Comparison."
    },
    {
        "name": "CreatePayload",
        "args": [
            {
                "name": "root",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "CreateUnit",
        "args": [
            {
                "name": "number",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "unit",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "TrgUnit"
            },
            {
                "name": "where",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "for_player",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": "Create quantity unit at location for player.\n\nThis action creates the specified number of units at the specified\nLocation. If a unit is created 'Anywhere', it will appear in the center of\nthe map. This action will not function while the game is paused.\n\nKeep in mind that when the conditions are successfully met,\nthe unit(s) will be created for each player that owns the trigger.\nFor example, if **All Players** own a trigger that creates a Terran Marine\nfor Player 1, and the conditions of the trigger are true for four of the\nplayers, Player 1 will get 4 Marines."
    },
    {
        "name": "CreateUnitWithProperties",
        "args": [
            {
                "name": "count",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "unit",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "TrgUnit"
            },
            {
                "name": "where",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "player",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "properties",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": "Create quantity unit at location for player. Apply properties\n\nThis action works just like Create Unit, except that you can customize\nthe properties of the newly created unit(s)."
    },
    {
        "name": "Deaths",
        "args": [
            {
                "name": "player",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "comparison",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "number",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "unit",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "TrgUnit"
            }
        ],
        "docs": "Player has suffered quantity deaths of unit.\n\nGives you the ability to create actions that are launched when a player has\nsuffered a specific number of deaths of any of the units in the game."
    },
    {
        "name": "DeathsX",
        "args": [
            {
                "name": "player",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "comparison",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "number",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "unit",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "TrgUnit"
            },
            {
                "name": "mask",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "Defeat",
        "args": [],
        "docs": "End scenario in defeat for current player.\n\nThis will end the scenario in defeat for the affected players.\nAny other players in the game will continue."
    },
    {
        "name": "Disabled",
        "args": [
            {
                "name": "arg",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": "Disable condition or action"
    },
    {
        "name": "DisplayText",
        "args": [
            {
                "name": "text",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "AlwaysDisplay",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "4",
                    "type": "int"
                },
                "type": "any"
            }
        ],
        "docs": "Display for current player: text.\n\nDisplays a specific text message to each owner of the condition."
    },
    {
        "name": "DisplayTextAll",
        "args": [
            {
                "name": "text",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": "Action: DisplayText for everyone (including observers)"
    },
    {
        "name": "DisplayTextAllAt",
        "args": [
            {
                "name": "line",
                "kind": "POSITIONAL_ONLY",
                "default": {
                    "value": "empty",
                    "type": "str"
                },
                "type": "any"
            },
            {
                "name": "text",
                "kind": "POSITIONAL_ONLY",
                "default": {
                    "value": "empty",
                    "type": "str"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "DisplayTextAt",
        "args": [
            {
                "name": "line",
                "kind": "POSITIONAL_ONLY",
                "default": {
                    "value": "empty",
                    "type": "str"
                },
                "type": "any"
            },
            {
                "name": "text",
                "kind": "POSITIONAL_ONLY",
                "default": {
                    "value": "empty",
                    "type": "str"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "DoActions",
        "args": [
            {
                "name": "actions",
                "kind": "VAR_POSITIONAL",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "preserved",
                "kind": "KEYWORD_ONLY",
                "default": {
                    "value": "True",
                    "type": "bool"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "Draw",
        "args": [],
        "docs": "End the scenario in a draw for all players.\n\nThis will end the scenario in a draw for the affected players.\nAny other players in the game will continue."
    },
    {
        "name": "EPD",
        "args": [
            {
                "name": "p",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "TrgOrder"
            },
            {
                "name": "kwargs",
                "kind": "VAR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "EPDSwitch",
        "args": [
            {
                "name": "epd",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "mask",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "4294967295",
                    "type": "int"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "EPS_SetDebug",
        "args": [
            {
                "name": "b",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "EP_SetRValueStrictMode",
        "args": [
            {
                "name": "mode",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "EUDAnd",
        "args": [
            {
                "name": "cond1",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "conds",
                "kind": "VAR_POSITIONAL",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": "cond1 && cond2 && ... && condn\n\n.. note::\n    This function computes AND value of various conditions.\n    If you don't want to do much computation, you should better use\n    plain list instead of this function.\n\n.. warning:: Short circuiting is not supported.\n\n:param conds: List of conditions"
    },
    {
        "name": "EUDBinaryMax",
        "args": [
            {
                "name": "cond",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "minv",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "0",
                    "type": "int"
                },
                "type": "any"
            },
            {
                "name": "maxv",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "4294967295",
                    "type": "int"
                },
                "type": "any"
            }
        ],
        "docs": "Find maximum x satisfying cond(x) using binary search\n\n:param cond: Test condition\n:param minv: Minimum value in domain\n:param maxv: Maximum value in domain\n\nCond should be binary classifier, meaning that for some N\n    for all x > N, cond(x) is false.\n    for all x <= N, cond(x) is true\nThen EUDBinaryMin will find such N.\n\n.. note:: If none of the value satisfies condition, then this\n    function will return maxv."
    },
    {
        "name": "EUDBinaryMin",
        "args": [
            {
                "name": "cond",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "minv",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "0",
                    "type": "int"
                },
                "type": "any"
            },
            {
                "name": "maxv",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "4294967295",
                    "type": "int"
                },
                "type": "any"
            }
        ],
        "docs": "Find minimum x satisfying cond(x) using binary search\n\n:param cond: Test condition\n:param minv: Minimum value in domain\n:param maxv: Maximum value in domain\n\nCond should be binary classifier, meaning that for some N\n    for all x < N, cond(x) is false.\n    for all x >= N, cond(x) is true\nThen EUDBinaryMin will find such N\n\n.. note:: If none of the value satisfies condition, then this\n    function will return maxv."
    },
    {
        "name": "EUDBranch",
        "args": [
            {
                "name": "conditions",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "ontrue",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "onfalse",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "_actions",
                "kind": "KEYWORD_ONLY",
                "default": {
                    "value": "None",
                    "type": "NoneType"
                },
                "type": "any"
            }
        ],
        "docs": "Branch by whether conditions is satisfied or not.\n\n:param conditions: Nested list of conditions.\n:param ontrue: When all conditions are true, this branch is taken.\n:param onfalse: When any of the conditions are false, this branch is taken.\n:param _actions: When all conditions are true, those actions are executed."
    },
    {
        "name": "EUDBreak",
        "args": [],
        "docs": ""
    },
    {
        "name": "EUDBreakIf",
        "args": [
            {
                "name": "conditions",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "EUDBreakIfNot",
        "args": [
            {
                "name": "conditions",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "EUDClearNamespace",
        "args": [],
        "docs": ""
    },
    {
        "name": "EUDContinue",
        "args": [],
        "docs": ""
    },
    {
        "name": "EUDContinueIf",
        "args": [
            {
                "name": "conditions",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "EUDContinueIfNot",
        "args": [
            {
                "name": "conditions",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "EUDCreateBlock",
        "args": [
            {
                "name": "name",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "userdata",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "EUDCreateVariables",
        "args": [
            {
                "name": "varn",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "EUDDoEvents",
        "args": [],
        "docs": ""
    },
    {
        "name": "EUDElse",
        "args": [],
        "docs": ""
    },
    {
        "name": "EUDElseIf",
        "args": [],
        "docs": ""
    },
    {
        "name": "EUDElseIfNot",
        "args": [],
        "docs": ""
    },
    {
        "name": "EUDEndExecuteOnce",
        "args": [],
        "docs": ""
    },
    {
        "name": "EUDEndIf",
        "args": [],
        "docs": ""
    },
    {
        "name": "EUDEndInfLoop",
        "args": [],
        "docs": ""
    },
    {
        "name": "EUDEndLoopN",
        "args": [],
        "docs": ""
    },
    {
        "name": "EUDEndPlayerLoop",
        "args": [],
        "docs": ""
    },
    {
        "name": "EUDEndSwitch",
        "args": [],
        "docs": ""
    },
    {
        "name": "EUDEndWhile",
        "args": [],
        "docs": ""
    },
    {
        "name": "EUDExecuteOnce",
        "args": [],
        "docs": ""
    },
    {
        "name": "EUDFunc",
        "args": [
            {
                "name": "fdecl_func",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "EUDFuncPtr",
        "args": [
            {
                "name": "argn",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "retn",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "EUDGetBlockList",
        "args": [],
        "docs": ""
    },
    {
        "name": "EUDGetLastBlock",
        "args": [],
        "docs": ""
    },
    {
        "name": "EUDGetLastBlockOfName",
        "args": [
            {
                "name": "name",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "EUDIf",
        "args": [],
        "docs": ""
    },
    {
        "name": "EUDIfNot",
        "args": [],
        "docs": ""
    },
    {
        "name": "EUDInfLoop",
        "args": [],
        "docs": ""
    },
    {
        "name": "EUDIsContinuePointSet",
        "args": [],
        "docs": ""
    },
    {
        "name": "EUDJump",
        "args": [
            {
                "name": "nextptr",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "must_use",
                "kind": "KEYWORD_ONLY",
                "default": {
                    "value": "True",
                    "type": "bool"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "EUDJumpIf",
        "args": [
            {
                "name": "conditions",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "ontrue",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "_actions",
                "kind": "KEYWORD_ONLY",
                "default": {
                    "value": "None",
                    "type": "NoneType"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "EUDJumpIfNot",
        "args": [
            {
                "name": "conditions",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "onfalse",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "_actions",
                "kind": "KEYWORD_ONLY",
                "default": {
                    "value": "None",
                    "type": "NoneType"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "EUDLoopCUnit",
        "args": [],
        "docs": "EUDLoopUnit\ubcf4\ub2e4 \uc57d\uac04? \ube60\ub985\ub2c8\ub2e4. \uc720\ub2db \ub9ac\uc2a4\ud2b8\ub97c \ub530\ub77c\uac00\uc9c0 \uc54a\uace0\n1700\uac1c \uc720\ub2db\uc744 \ub3c4\ub294 \ubc29\uc2dd\uc73c\ub85c \uc791\ub3d9\ud569\ub2c8\ub2e4."
    },
    {
        "name": "EUDLoopList",
        "args": [
            {
                "name": "header_offset",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "break_offset",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "None",
                    "type": "NoneType"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "EUDLoopN",
        "args": [],
        "docs": ""
    },
    {
        "name": "EUDLoopNewCUnit",
        "args": [
            {
                "name": "allowance",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "2",
                    "type": "int"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "EUDLoopNewUnit",
        "args": [
            {
                "name": "allowance",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "2",
                    "type": "int"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "EUDLoopPlayer",
        "args": [
            {
                "name": "ptype",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "Human",
                    "type": "str"
                },
                "type": "any"
            },
            {
                "name": "force",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "None",
                    "type": "NoneType"
                },
                "type": "any"
            },
            {
                "name": "race",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "None",
                    "type": "NoneType"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "EUDLoopPlayerCUnit",
        "args": [
            {
                "name": "player",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "EUDLoopPlayerUnit",
        "args": [
            {
                "name": "player",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "EUDLoopRange",
        "args": [
            {
                "name": "start",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "end",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "None",
                    "type": "NoneType"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "EUDLoopUnit",
        "args": [],
        "docs": ""
    },
    {
        "name": "EUDLoopUnit2",
        "args": [],
        "docs": "EUDLoopUnit\ubcf4\ub2e4 \uc57d\uac04? \ube60\ub985\ub2c8\ub2e4. \uc720\ub2db \ub9ac\uc2a4\ud2b8\ub97c \ub530\ub77c\uac00\uc9c0 \uc54a\uace0\n1700\uac1c \uc720\ub2db\uc744 \ub3c4\ub294 \ubc29\uc2dd\uc73c\ub85c \uc791\ub3d9\ud569\ub2c8\ub2e4."
    },
    {
        "name": "EUDMethod",
        "args": [
            {
                "name": "method",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "EUDNot",
        "args": [
            {
                "name": "cond",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": "!cond\n\n:param conds: Condition to negate"
    },
    {
        "name": "EUDOnStart",
        "args": [
            {
                "name": "func",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "EUDOr",
        "args": [
            {
                "name": "cond1",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "conds",
                "kind": "VAR_POSITIONAL",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": "cond1 || cond2 || ... || condn\n\n.. warning:: Short circuiting is not supported\n\n:param conds: List of conditions"
    },
    {
        "name": "EUDPeekBlock",
        "args": [
            {
                "name": "name",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "EUDPlayerLoop",
        "args": [],
        "docs": ""
    },
    {
        "name": "EUDPopBlock",
        "args": [
            {
                "name": "name",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "EUDRegisterObjectToNamespace",
        "args": [
            {
                "name": "funcname",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "obj",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": "Register object to inline code namespace."
    },
    {
        "name": "EUDRegistered",
        "args": [
            {
                "name": "func",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": "Decorator for registering class / function."
    },
    {
        "name": "EUDReturn",
        "args": [
            {
                "name": "args",
                "kind": "VAR_POSITIONAL",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "EUDSetContinuePoint",
        "args": [],
        "docs": ""
    },
    {
        "name": "EUDStack",
        "args": [
            {
                "name": "basetype",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "None",
                    "type": "NoneType"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "EUDSwitch",
        "args": [
            {
                "name": "var",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "mask",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "4294967295",
                    "type": "int"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "EUDSwitchCase",
        "args": [],
        "docs": ""
    },
    {
        "name": "EUDSwitchDefault",
        "args": [],
        "docs": ""
    },
    {
        "name": "EUDTernary",
        "args": [
            {
                "name": "conditions",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "neg",
                "kind": "KEYWORD_ONLY",
                "default": {
                    "value": "False",
                    "type": "bool"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "EUDTypedFunc",
        "args": [
            {
                "name": "argtypes",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "rettypes",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "None",
                    "type": "NoneType"
                },
                "type": "any"
            },
            {
                "name": "traced",
                "kind": "KEYWORD_ONLY",
                "default": {
                    "value": "False",
                    "type": "bool"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "EUDTypedFuncPtr",
        "args": [
            {
                "name": "argtypes",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "rettypes",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "EUDTypedMethod",
        "args": [
            {
                "name": "argtypes",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "rettypes",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "None",
                    "type": "NoneType"
                },
                "type": "any"
            },
            {
                "name": "traced",
                "kind": "KEYWORD_ONLY",
                "default": {
                    "value": "False",
                    "type": "bool"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "EUDWhile",
        "args": [],
        "docs": ""
    },
    {
        "name": "EUDWhileNot",
        "args": [],
        "docs": ""
    },
    {
        "name": "ElapsedTime",
        "args": [
            {
                "name": "comparison",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "time",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": "Elapsed scenario time is duration game seconds.\n\nThis condition allows you to create triggers that occur after a specified\nnumber of game seconds have passed since the start of the scenario."
    },
    {
        "name": "EncodeAIScript",
        "args": [
            {
                "name": "ais",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "TrgAIScript"
            },
            {
                "name": "issueError",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "False",
                    "type": "bool"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "EncodeAllyStatus",
        "args": [
            {
                "name": "s",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "TrgResource"
            },
            {
                "name": "issueError",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "False",
                    "type": "bool"
                },
                "type": "any"
            }
        ],
        "docs": "Convert [Enemy, Ally, AlliedVictory] to number [0, 1, 2]."
    },
    {
        "name": "EncodeComparison",
        "args": [
            {
                "name": "s",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "TrgResource"
            },
            {
                "name": "issueError",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "False",
                    "type": "bool"
                },
                "type": "any"
            }
        ],
        "docs": "Convert [AtLeast, AtMost, Exactly] to number [0, 1, 10]."
    },
    {
        "name": "EncodeCount",
        "args": [
            {
                "name": "s",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "TrgResource"
            },
            {
                "name": "issueError",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "False",
                    "type": "bool"
                },
                "type": "any"
            }
        ],
        "docs": "Convert [All, (other numbers)] to number [0, (as-is)]."
    },
    {
        "name": "EncodeFlingy",
        "args": [
            {
                "name": "flingy",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "issueError",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "False",
                    "type": "bool"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "EncodeIcon",
        "args": [
            {
                "name": "icon",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "issueError",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "False",
                    "type": "bool"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "EncodeImage",
        "args": [
            {
                "name": "image",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "issueError",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "False",
                    "type": "bool"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "EncodeIscript",
        "args": [
            {
                "name": "iscript",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "issueError",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "False",
                    "type": "bool"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "EncodeLocation",
        "args": [
            {
                "name": "loc",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "issueError",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "False",
                    "type": "bool"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "EncodeModifier",
        "args": [
            {
                "name": "s",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "TrgResource"
            },
            {
                "name": "issueError",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "False",
                    "type": "bool"
                },
                "type": "any"
            }
        ],
        "docs": "Convert [SetTo, Add, Subtract] to number [7, 8, 9]."
    },
    {
        "name": "EncodeOrder",
        "args": [
            {
                "name": "s",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "TrgResource"
            },
            {
                "name": "issueError",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "False",
                    "type": "bool"
                },
                "type": "any"
            }
        ],
        "docs": "Convert [Move, Patrol, Attack] to number [0, 1, 2]."
    },
    {
        "name": "EncodePlayer",
        "args": [
            {
                "name": "s",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "TrgResource"
            },
            {
                "name": "issueError",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "False",
                    "type": "bool"
                },
                "type": "any"
            }
        ],
        "docs": "Convert player identifier to corresponding number.\n\n======================= ========\n    Identifier           Number\n======================= ========\nP1                         0\nP2                         1\nP3                         2\nP4                         3\nP5                         4\nP6                         5\nP7                         6\nP8                         7\nP9                         8\nP10                        9\nP11                        10\nP12                        11\nPlayer1                    0\nPlayer2                    1\nPlayer3                    2\nPlayer4                    3\nPlayer5                    4\nPlayer6                    5\nPlayer7                    6\nPlayer8                    7\nPlayer9                    8\nPlayer10                   9\nPlayer11                   10\nPlayer12                   11\nCurrentPlayer              13\nFoes                       14\nAllies                     15\nNeutralPlayers             16\nAllPlayers                 17\nForce1                     18\nForce2                     19\nForce3                     20\nForce4                     21\nNonAlliedVictoryPlayers    26\n======================= ========"
    },
    {
        "name": "EncodePortrait",
        "args": [
            {
                "name": "portrait",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "issueError",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "False",
                    "type": "bool"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "EncodePropState",
        "args": [
            {
                "name": "s",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "TrgResource"
            },
            {
                "name": "issueError",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "False",
                    "type": "bool"
                },
                "type": "any"
            }
        ],
        "docs": "Convert [Enable, Disable, Toogle] to number [4, 5, 6]"
    },
    {
        "name": "EncodeProperty",
        "args": [
            {
                "name": "prop",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "TrgProperty"
            },
            {
                "name": "issueError",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "False",
                    "type": "bool"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "EncodeResource",
        "args": [
            {
                "name": "s",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "TrgResource"
            },
            {
                "name": "issueError",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "False",
                    "type": "bool"
                },
                "type": "any"
            }
        ],
        "docs": "Convert [Ore, Gas, OreAndGas] to [0, 1, 2]"
    },
    {
        "name": "EncodeScore",
        "args": [
            {
                "name": "s",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "TrgResource"
            },
            {
                "name": "issueError",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "False",
                    "type": "bool"
                },
                "type": "any"
            }
        ],
        "docs": "Convert score type identifier to number.\n\n================= ========\n    _Score type     Number\n================= ========\nTotal                0\nUnits                1\nBuildings            2\nUnitsAndBuildings    3\nKills                4\nRazings              5\nKillsAndRazings      6\nCustom               7\n================= ========"
    },
    {
        "name": "EncodeSprite",
        "args": [
            {
                "name": "sprite",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "issueError",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "False",
                    "type": "bool"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "EncodeString",
        "args": [
            {
                "name": "s",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "TrgResource"
            },
            {
                "name": "issueError",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "False",
                    "type": "bool"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "EncodeSwitch",
        "args": [
            {
                "name": "sw",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "issueError",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "False",
                    "type": "bool"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "EncodeSwitchAction",
        "args": [
            {
                "name": "s",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "TrgResource"
            },
            {
                "name": "issueError",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "False",
                    "type": "bool"
                },
                "type": "any"
            }
        ],
        "docs": "Convert [Set, Clear, Toogle, Random] to [4, 5, 6, 11]."
    },
    {
        "name": "EncodeSwitchState",
        "args": [
            {
                "name": "s",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "TrgResource"
            },
            {
                "name": "issueError",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "False",
                    "type": "bool"
                },
                "type": "any"
            }
        ],
        "docs": "Convert [Set, Cleared] to [2, 3]."
    },
    {
        "name": "EncodeTBL",
        "args": [
            {
                "name": "t",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "TrgUnit"
            },
            {
                "name": "issueError",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "False",
                    "type": "bool"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "EncodeTech",
        "args": [
            {
                "name": "tech",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "issueError",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "False",
                    "type": "bool"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "EncodeUnit",
        "args": [
            {
                "name": "u",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "TrgResource"
            },
            {
                "name": "issueError",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "False",
                    "type": "bool"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "EncodeUnitOrder",
        "args": [
            {
                "name": "order",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "issueError",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "False",
                    "type": "bool"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "EncodeUpgrade",
        "args": [
            {
                "name": "upgrade",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "issueError",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "False",
                    "type": "bool"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "EncodeWeapon",
        "args": [
            {
                "name": "weapon",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "issueError",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "False",
                    "type": "bool"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "FlattenIter",
        "args": [
            {
                "name": "lst",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "FlattenList",
        "args": [
            {
                "name": "lst",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "ret",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "None",
                    "type": "NoneType"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "GetChkTokenized",
        "args": [],
        "docs": ""
    },
    {
        "name": "GetEUDNamespace",
        "args": [],
        "docs": "Get list of functions that inline code can use."
    },
    {
        "name": "GetFirstTrigTrigger",
        "args": [
            {
                "name": "player",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": "Get dlist start of trig-trigger for player"
    },
    {
        "name": "GetGlobalStringBuffer",
        "args": [],
        "docs": ""
    },
    {
        "name": "GetLastTrigTrigger",
        "args": [
            {
                "name": "player",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": "Get dlist end of trig-trigger for player"
    },
    {
        "name": "GetLocationIndex",
        "args": [
            {
                "name": "loc",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "GetMapStringAddr",
        "args": [
            {
                "name": "str_id",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "GetObjectAddr",
        "args": [
            {
                "name": "obj",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "GetPlayerInfo",
        "args": [
            {
                "name": "player",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "GetPropertyIndex",
        "args": [
            {
                "name": "prop",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "TrgProperty"
            }
        ],
        "docs": ""
    },
    {
        "name": "GetStringIndex",
        "args": [
            {
                "name": "s",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "TrgResource"
            }
        ],
        "docs": ""
    },
    {
        "name": "GetSwitchIndex",
        "args": [
            {
                "name": "s",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "TrgResource"
            }
        ],
        "docs": ""
    },
    {
        "name": "GetTBLAddr",
        "args": [
            {
                "name": "tbl_id",
                "kind": "POSITIONAL_ONLY",
                "default": {
                    "value": "empty",
                    "type": "str"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "GetTriggerCounter",
        "args": [],
        "docs": ""
    },
    {
        "name": "GetUnitIndex",
        "args": [
            {
                "name": "u",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "TrgResource"
            }
        ],
        "docs": ""
    },
    {
        "name": "GiveUnits",
        "args": [
            {
                "name": "count",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "unit",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "TrgUnit"
            },
            {
                "name": "owner",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "where",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "new_owner",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": "Give quantity units owned by player at location to player.\n\nThis action allows you to transfer units from one player to another."
    },
    {
        "name": "HighestScore",
        "args": [
            {
                "name": "ScoreType",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "TrgScore"
            }
        ],
        "docs": "Current player has highest score points.\n\nThis condition is considered true if the trigger's owner has the highest\nScore. Note that if this is used as the only condition in a trigger,\nit will activate immediately at the start of the scenario,\nsince all players will be tied for the highest score."
    },
    {
        "name": "Is64BitWireframe",
        "args": [],
        "docs": "Check whether StarCraft is 32 bit or 64 bit, by inspecting wireframe.\n\nLocal (desync) condition.\nIs64BitWireframe() loads custom wireframes,\ncausing wireframe graphic glitches by StarCraft."
    },
    {
        "name": "IsEUDVariable",
        "args": [
            {
                "name": "x",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "IsMapdataInitialized",
        "args": [],
        "docs": ""
    },
    {
        "name": "IsPName",
        "args": [
            {
                "name": "player",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "name",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "IsUserCP",
        "args": [],
        "docs": "Condition: check if CurrentPlayer equals to user player id (local)"
    },
    {
        "name": "KillUnit",
        "args": [
            {
                "name": "unit",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "TrgUnit"
            },
            {
                "name": "player",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": "Kill all units for player.\n\nThis action kills all units of a particular type for the player specified.\nThis action has no effect while the game is paused."
    },
    {
        "name": "KillUnitAt",
        "args": [
            {
                "name": "count",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "unit",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "TrgUnit"
            },
            {
                "name": "where",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "for_player",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": "Kill quantity units for player at location.\n\nSimilar to the 'Kill Unit' action, the 'Kill Unit at Location' action gives\nyou the ability to kill a specified number of units of a particular type\nbelonging to a certain player at the specified Location.\nThis action will not function while the game is paused."
    },
    {
        "name": "LeaderBoardComputerPlayers",
        "args": [
            {
                "name": "state",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": "Set use of computer players in leaderboard calculations.\n\nThis action allows you to specify whether neutral, rescue and computer\ncontrolled players will be included in the leader board calculations.\nBy default, all computer players are included in the tally."
    },
    {
        "name": "LeaderBoardControl",
        "args": [
            {
                "name": "unit",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "TrgUnit"
            },
            {
                "name": "label",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": "Show Leader Board for most control of unit. Display label: label\n\nThis will display the Leader Board to all players based on who controls\nthe most of a particular unit in the scenario."
    },
    {
        "name": "LeaderBoardControlAt",
        "args": [
            {
                "name": "unit",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "TrgUnit"
            },
            {
                "name": "location",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "TrgLocation"
            },
            {
                "name": "label",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": "Show Leader Board for most control of units at location.\n\nDisplay label: label"
    },
    {
        "name": "LeaderBoardGoalControl",
        "args": [
            {
                "name": "goal",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "unit",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "TrgUnit"
            },
            {
                "name": "label",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": "Show Leader Board for player closest to control of number of unit.\n\nDisplay label: label\nThis will display the Leader Board to all players based on the amount of\nunits controlled on the map that are required to achieve a goal.\nIn this type of leader board, the lower the number the better."
    },
    {
        "name": "LeaderBoardGoalControlAt",
        "args": [
            {
                "name": "goal",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "unit",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "TrgUnit"
            },
            {
                "name": "location",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "TrgLocation"
            },
            {
                "name": "label",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": "Show Leader Board for player closest to control of number of units at\nlocation.\n\nDisplay label: label\nThis will display the Leader Board to all players based on the amount of\nunits controlled at a certain Location that are required to achieve a goal.\nIn this type of leader board, the lower the number the better."
    },
    {
        "name": "LeaderBoardGoalKills",
        "args": [
            {
                "name": "goal",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "unit",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "TrgUnit"
            },
            {
                "name": "label",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": "Show Leader Board for player closest to number kills of unit.\n\nDisplay label: label\nThis will display the Leader Board to all players based on who have\nthe most kills required to achieve a goal.\nIn this type of leader board, the lower the number the better."
    },
    {
        "name": "LeaderBoardGoalResources",
        "args": [
            {
                "name": "goal",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "resource_type",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "label",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": "Show Leader Board for player closest to accumulation of number resource.\n\nDisplay label: label\nThis will display the Leader Board to all players based on who have\nthe most resources required to achieve a goal.\nIn this type of leader board, the lower the number the better."
    },
    {
        "name": "LeaderBoardGoalScore",
        "args": [
            {
                "name": "goal",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "ScoreType",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "TrgScore"
            },
            {
                "name": "label",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": "Show Leader Board for player closest to number points.\n\nDisplay label: label\nThis will display the Leader Board to all players based on who have the\nmost points required to achieve a goal.\nIn this type of leader board, the lower the number the better."
    },
    {
        "name": "LeaderBoardGreed",
        "args": [
            {
                "name": "goal",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": "Show Greed Leader Board for player closest to accumulation of number\nore and gas.\n\nThis will display the Leader Board to all players based on who is closest\nto reaching the goal of accumulating the most ore and gas."
    },
    {
        "name": "LeaderBoardKills",
        "args": [
            {
                "name": "unit",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "TrgUnit"
            },
            {
                "name": "label",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": "Show Leader Board for most kills of unit. Display label: label\n\nThis will display the Leader Board to all players based on who has the most\nkills in the scenario."
    },
    {
        "name": "LeaderBoardResources",
        "args": [
            {
                "name": "resource_type",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "label",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": "Show Leader Board for accumulation of most resource.\n\nDisplay label: label\nThis will display the Leader Board to all players based on who has\nthe most resources."
    },
    {
        "name": "LeaderBoardScore",
        "args": [
            {
                "name": "ScoreType",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "TrgScore"
            },
            {
                "name": "label",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": "Show Leader Board for most points. Display label: label\n\nThis will display the Leader Board to all players based on who has\nthe most points."
    },
    {
        "name": "LeastKills",
        "args": [
            {
                "name": "unit",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "TrgUnit"
            }
        ],
        "docs": "Current player has least kills of unit.\n\nThis condition is considered true if the trigger's owner has the least\nkills of the specified Unit."
    },
    {
        "name": "LeastResources",
        "args": [
            {
                "name": "resource_type",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": "Current player has least resources.\n\nSimilar to Least Kills, this condition is considered true if the trigger's\nowner has the least of the specified resource.\nNote that Least Resources checks all players, including neutral, computer\ncontrolled and rescuable players."
    },
    {
        "name": "List2Assignable",
        "args": [
            {
                "name": "lst",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "LoadMap",
        "args": [
            {
                "name": "fname",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": "Load basemap from fname\n\n:param fname: Path for basemap."
    },
    {
        "name": "LowestScore",
        "args": [
            {
                "name": "ScoreType",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "TrgScore"
            }
        ],
        "docs": "Current player has lowest score points.\n\nThis condition evaluates the current Score and is considered true\nif the current player has the lowest or is tied for the lowest score.\nLowest Score checks all players, including neutral and rescuable players."
    },
    {
        "name": "MPQAddFile",
        "args": [
            {
                "name": "fname",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "content",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "is_wav",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "False",
                    "type": "bool"
                },
                "type": "any"
            }
        ],
        "docs": "Add file/wave to output map.\n\n:param fname: Desired filename in mpq\n:param content: Content to put inside.\n:param is_wav: Is file wave file? Wave file can be lossy compressed if this\n    flag is set to True.\n\n.. note::\n    This function may error if duplicate filenames is found. However, not\n    all duplicated filenames are guaranteed to be catched here. Some of\n    them may be catched at _update_mpq(internal) function."
    },
    {
        "name": "MPQAddWave",
        "args": [
            {
                "name": "fname",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "content",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": "Add wave to output map.\n\n:param fname: Desired filename in mpq\n:param content: Content to put inside.\n\n.. note:: See `MPQAddFile` for more info"
    },
    {
        "name": "MPQCheckFile",
        "args": [
            {
                "name": "fname",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": "Check if filename is already exist.\n\n:param fname: Desired filename in mpq"
    },
    {
        "name": "Memory",
        "args": [
            {
                "name": "dest",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "cmptype",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "TrgComparison"
            },
            {
                "name": "value",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "MemoryEPD",
        "args": [
            {
                "name": "dest",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "cmptype",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "TrgComparison"
            },
            {
                "name": "value",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "MemoryX",
        "args": [
            {
                "name": "dest",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "cmptype",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "TrgComparison"
            },
            {
                "name": "value",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "mask",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "MemoryXEPD",
        "args": [
            {
                "name": "dest",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "cmptype",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "TrgComparison"
            },
            {
                "name": "value",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "mask",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "MinimapPing",
        "args": [
            {
                "name": "where",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": "Show minimap ping for current player at location.\n\nThis sends out a 'ping' on the mini map at the specified location.\nThis can be used to draw attention to a particular spot or to track a\nmoving location. Note that pressing the spacebar in the game after\nreceiving the ping will not center your screen on the ping Location.\nOnly transmissions allow you to jump to a different location with the\nspacebar."
    },
    {
        "name": "MinimapPingAll",
        "args": [
            {
                "name": "location",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "TrgLocation"
            }
        ],
        "docs": "Action: MinimapPing for everyone (including observers)"
    },
    {
        "name": "ModifyUnitEnergy",
        "args": [
            {
                "name": "count",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "unit",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "TrgUnit"
            },
            {
                "name": "owner",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "where",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "percent",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": "Set energy points for quantity units owned by player at location to\npercent%.\n\nThis action will modify the specified unit(s) spell-casting energy. The\nenergy will be changed based on the percentage specified in the action\ntrigger."
    },
    {
        "name": "ModifyUnitHangarCount",
        "args": [
            {
                "name": "add",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "count",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "unit",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "TrgUnit"
            },
            {
                "name": "owner",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "where",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": "Add at most quantity to hangar for quantity units at location owned by\nplayer.\n\nThis action will modify the contents of a unit(s) hangar.\nFor example, this will allow you to add 5 additional Interceptors to the\nCarrier's hangar."
    },
    {
        "name": "ModifyUnitHitPoints",
        "args": [
            {
                "name": "count",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "unit",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "TrgUnit"
            },
            {
                "name": "owner",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "where",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "percent",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": "Set hit points for quantity units owned by player at location to\npercent%.\n\nThis action will modify the specified unit(s) hit points. The hit points\nwill be changed based on the percentage specified in the action trigger."
    },
    {
        "name": "ModifyUnitResourceAmount",
        "args": [
            {
                "name": "count",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "owner",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "where",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "new_value",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": "Set resource amount for quantity resource sources owned by player at\nlocation to quantity.\n\nThis action allows you to modify the amount of resources contained in the\nvarious mineral stores. For example, you could modify a Vespene Geyser\nso that it had 0 resources if you desire."
    },
    {
        "name": "ModifyUnitShields",
        "args": [
            {
                "name": "count",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "unit",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "TrgUnit"
            },
            {
                "name": "owner",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "where",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "percent",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": "Set shield points for quantity units owned by player at location to\npercent%.\n\nThis action will modify the specified unit(s) shield points.\nThe shield points will be changed based on the percentage specified in the\naction trigger."
    },
    {
        "name": "MostKills",
        "args": [
            {
                "name": "unit",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "TrgUnit"
            }
        ],
        "docs": "Current player has most kills of unit.\n\nThis condition is considered true if the trigger's owner has\nthe most kills of the specified Unit."
    },
    {
        "name": "MostResources",
        "args": [
            {
                "name": "resource_type",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": "Current player has most resources.\n\nSimilar to Most Kills, this condition is considered true if the trigger's\nowner has the most of the specified resource."
    },
    {
        "name": "MoveLocation",
        "args": [
            {
                "name": "location",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "TrgLocation"
            },
            {
                "name": "on_unit",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "owner",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "dest_location",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": "Center location labeled location on units owned by player at location.\n\nThis action will center a Location on a unit.\nIn addition to choosing a location to move, you must specify a search\nlocation. The Action will ignore any units outside the search location.\nIf no unit is found, the Location will move to the center of the search\nlocation. You can combine this Action with Center View to center the screen\non a particular unit."
    },
    {
        "name": "MoveUnit",
        "args": [
            {
                "name": "count",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "unit_type",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "owner",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "start_location",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "dest_location",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": "Move quantity units for player at location to destination.\n\nThis action will teleport a specified number of units (or unit) from one\nLocation to another."
    },
    {
        "name": "MuteUnitSpeech",
        "args": [],
        "docs": "Mute all non-trigger unit sounds for current player.\n\nThis action will mute unit speech and set to half-volume all sound effects\nthat the game normally produces, including music and combat sounds.\nThis is particularly useful when you are playing a Transmission Action\nor any time you want to make sure a triggered sound is heard clearly."
    },
    {
        "name": "Never",
        "args": [],
        "docs": "Never.\n\nThe Never condition can be used to temporarily disable actions for testing.\nA trigger with the Never condition will not activate at any point."
    },
    {
        "name": "NextTrigger",
        "args": [],
        "docs": ""
    },
    {
        "name": "NonSeqCompute",
        "args": [
            {
                "name": "assignpairs",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "Opponents",
        "args": [
            {
                "name": "player",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "comparison",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "number",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": "Player has quantity opponents remaining in the game.\n\nThis condition evaluates how many of the players are opponents of the\ntrigger owner. By default, all of the other players are considered\nopponents. A player does not count as an opponent if either of the\nfollowing conditions are met:\n\n* The player has been defeated. This condition only counts players\nthat are still in the game.\n\n* The player is set for allied victory with the trigger owner,\nAND the player is set for allied victory with all other players set for\nallied victory with the trigger owner.\n(The enemy of an ally is still an enemy.)\n\nAs a result, if opponents equals zero, all of remaining players are set for\nallied victory with each other. Use this condition with the Victory action\nto create a scenario that allows for allied victory."
    },
    {
        "name": "Order",
        "args": [
            {
                "name": "unit",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "TrgUnit"
            },
            {
                "name": "owner",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "start_location",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "order_type",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "dest_location",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": "Issue order to all units owned by player at location: order to\ndestination.\n\nThis action allows you to issue orders through a trigger to a unit\n(or units) that will change their behavior in a scenario.\nThe different orders are attack, move and patrol."
    },
    {
        "name": "PColor",
        "args": [
            {
                "name": "i",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "TrgUnit"
            }
        ],
        "docs": ""
    },
    {
        "name": "PName",
        "args": [
            {
                "name": "x",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "PRT_SetInliningRate",
        "args": [
            {
                "name": "rate",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": "Set how much triggers will be inlined into STR section."
    },
    {
        "name": "PRT_SkipPayloadRelocator",
        "args": [
            {
                "name": "enable",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "PTrigger",
        "args": [
            {
                "name": "players",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "conditions",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "None",
                    "type": "NoneType"
                },
                "type": "any"
            },
            {
                "name": "actions",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "None",
                    "type": "NoneType"
                },
                "type": "any"
            }
        ],
        "docs": "Execute trigger by player basis\n\n:param players: Players the trigger should execute with. When Current\n    Player specifies any of the players, trigger will execute.\n:param conditions: List of conditions. If all conditions are met, then\n    actions will be executed.\n:param actions: List of actions."
    },
    {
        "name": "PauseGame",
        "args": [],
        "docs": "Pause the game.\n\nThis action will put the game in a pause state.\nIf a matching Unpause Game is not found, the program automatically unpauses\nthe game when the current trigger is finished. Note that pause game has no\neffect in multiplayer scenarios or against computer controlled players."
    },
    {
        "name": "PauseTimer",
        "args": [],
        "docs": "Pause the game.\n\nThis action will put the game in a pause state.\nIf a matching Unpause Game is not found, the program automatically unpauses\nthe game when the current trigger is finished. Note that pause game has\nno effect in multiplayer scenarios or against computer controlled players."
    },
    {
        "name": "PlayWAV",
        "args": [
            {
                "name": "sound_name",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": "Play WAV file.\n\nThis will play a WAV file for the trigger's owner."
    },
    {
        "name": "PlayWAVAll",
        "args": [
            {
                "name": "soundpath",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": "Action: PlayWAV for everyone (including observers)"
    },
    {
        "name": "PopTriggerScope",
        "args": [],
        "docs": ""
    },
    {
        "name": "PreserveTrigger",
        "args": [],
        "docs": "Preserve Trigger.\n\nNormally, a trigger will only run once for each owner.\nTriggers automatically disable themselves once they run through all of\ntheir actions, unless the Preserve Trigger action is present.\nIf you want a trigger to remain in effect throughout the scenario,\nadd the Preserve Trigger action to its action list."
    },
    {
        "name": "PushTriggerScope",
        "args": [],
        "docs": ""
    },
    {
        "name": "QueueGameCommand",
        "args": [
            {
                "name": "data",
                "kind": "POSITIONAL_ONLY",
                "default": {
                    "value": "empty",
                    "type": "str"
                },
                "type": "any"
            },
            {
                "name": "size",
                "kind": "POSITIONAL_ONLY",
                "default": {
                    "value": "empty",
                    "type": "str"
                },
                "type": "any"
            }
        ],
        "docs": "Queue game command to packet queue.\n\nStarcraft periodically broadcasts game packets to other player. Game\npackets are stored to queue, and this function add data to that queue, so\nthat SC can broadcast it.\n\n:param data: Data to put in queue\n:param size: Size of data\n\n.. note::\n    If packet queue is full, this function fails. This behavior is silent\n    without any warning or error, since this behavior shouldn't happen in\n    common situations. So **Don't use this function too much in a frame.**"
    },
    {
        "name": "QueueGameCommand_AddSelect",
        "args": [
            {
                "name": "n",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "TrgUnit"
            },
            {
                "name": "ptr_arr",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": "== 0x0A - Select Delta Add ==\n{{{\n    BYTE bCount;\n    WORD unitID[bCount];\n}}}"
    },
    {
        "name": "QueueGameCommand_MergeArchon",
        "args": [],
        "docs": ""
    },
    {
        "name": "QueueGameCommand_MergeDarkArchon",
        "args": [],
        "docs": ""
    },
    {
        "name": "QueueGameCommand_MinimapPing",
        "args": [
            {
                "name": "xy",
                "kind": "POSITIONAL_ONLY",
                "default": {
                    "value": "empty",
                    "type": "str"
                },
                "type": "any"
            }
        ],
        "docs": "Queue minimap ping action.\n\n:param xy: (y * 65536) + x, where (x, y) is coordinate for minimap ping."
    },
    {
        "name": "QueueGameCommand_PauseGame",
        "args": [],
        "docs": ""
    },
    {
        "name": "QueueGameCommand_QueuedRightClick",
        "args": [
            {
                "name": "xy",
                "kind": "POSITIONAL_ONLY",
                "default": {
                    "value": "empty",
                    "type": "str"
                },
                "type": "any"
            }
        ],
        "docs": "Queue right click action.\n\n:param xy: (y * 65536) + x, where (x, y) is coordinate for right click."
    },
    {
        "name": "QueueGameCommand_RemoveSelect",
        "args": [
            {
                "name": "n",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "TrgUnit"
            },
            {
                "name": "ptr_arr",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": "== 0x0B - Select Delta Del ==\n{{{\n    BYTE bCount;\n    WORD unitID[bCount];\n}}}"
    },
    {
        "name": "QueueGameCommand_RestartGame",
        "args": [],
        "docs": ""
    },
    {
        "name": "QueueGameCommand_ResumeGame",
        "args": [],
        "docs": ""
    },
    {
        "name": "QueueGameCommand_RightClick",
        "args": [
            {
                "name": "xy",
                "kind": "POSITIONAL_ONLY",
                "default": {
                    "value": "empty",
                    "type": "str"
                },
                "type": "any"
            }
        ],
        "docs": "Queue right click action.\n\n:param xy: (y * 65536) + x, where (x, y) is coordinate for right click."
    },
    {
        "name": "QueueGameCommand_Select",
        "args": [
            {
                "name": "n",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "TrgUnit"
            },
            {
                "name": "ptr_arr",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": "== 0x09 - Select Units ==\n{{{\n    BYTE bCount;\n    WORD unitID[bCount];\n}}}"
    },
    {
        "name": "QueueGameCommand_TrainUnit",
        "args": [
            {
                "name": "unit",
                "kind": "POSITIONAL_ONLY",
                "default": {
                    "value": "empty",
                    "type": "str"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "QueueGameCommand_UseCheat",
        "args": [
            {
                "name": "flags",
                "kind": "POSITIONAL_ONLY",
                "default": {
                    "value": "empty",
                    "type": "str"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "RemoveUnit",
        "args": [
            {
                "name": "unit",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "TrgUnit"
            },
            {
                "name": "player",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": "Remove all units for player.\n\nRemove Unit works just like Kill Unit, except that the affected units will\nsimply disappear without actually dying.\nThis action has no effect while the game is paused."
    },
    {
        "name": "RemoveUnitAt",
        "args": [
            {
                "name": "count",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "unit",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "TrgUnit"
            },
            {
                "name": "where",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "for_player",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": "Remove all units for player.\n\nThis action works just like Remove Unit.\nIn addition, you may specify a location and a quantity of units that the\naction will affect. It has no effect on a paused game."
    },
    {
        "name": "RunAIScript",
        "args": [
            {
                "name": "script",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "TrgAIScript"
            }
        ],
        "docs": "Execute AI script script.\n\nThis instructs the specified computer-controlled players to use a certain\nAI script. The AI script determines the overall aggressiveness and\neffectiveness of the computer player, and by changing the AI script during\nthe scenario, you can effectively handicap the scenario."
    },
    {
        "name": "RunAIScriptAt",
        "args": [
            {
                "name": "script",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "TrgAIScript"
            },
            {
                "name": "where",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": "Execute AI script script at location.\n\nIdentical to [Run AI Script](#link_action_runaiscript) but specifies\na location to run the script at.\nCertain scripts are designed specifically to target a Location."
    },
    {
        "name": "RunTrigTrigger",
        "args": [],
        "docs": ""
    },
    {
        "name": "SCMD2Text",
        "args": [
            {
                "name": "s",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "TrgResource"
            }
        ],
        "docs": ""
    },
    {
        "name": "SaveMap",
        "args": [
            {
                "name": "fname",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "rootf",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "sector_size",
                "kind": "KEYWORD_ONLY",
                "default": {
                    "value": "None",
                    "type": "NoneType"
                },
                "type": "any"
            }
        ],
        "docs": "Save output map with root function.\n\n:param fname: Path for output map.\n:param rootf: Main entry function."
    },
    {
        "name": "Score",
        "args": [
            {
                "name": "player",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "ScoreType",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "TrgScore"
            },
            {
                "name": "comparison",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "number",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": "Player score type score is quantity.\n\nThis condition allows you to analyze a player's current Score and perform\nactions based on the value.\nYou can reference any of the individual scoring types from score."
    },
    {
        "name": "SeqCompute",
        "args": [
            {
                "name": "assignpairs",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "SetAllianceStatus",
        "args": [
            {
                "name": "player",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "status",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": "Set Player to Ally status.\n\nThis allows you to set the value of the affected players' alliance status."
    },
    {
        "name": "SetCountdownTimer",
        "args": [
            {
                "name": "time_modifier",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "time",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": "Modify Countdown Timer: Set duration seconds.\n\nThis allows you to set a countdown timer, in game seconds, which will\nappear at the top of the game screen and count down automatically.\nThere is one countdown timer shared by all players. Any time the countdown\ntimer is not equal to zero, it is displayed to all players.\n\nYou can also use this action to add or subtract time from the countdown\ntimer."
    },
    {
        "name": "SetCurrentPlayer",
        "args": [
            {
                "name": "p",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "TrgOrder"
            }
        ],
        "docs": ""
    },
    {
        "name": "SetDeaths",
        "args": [
            {
                "name": "player",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "modifier",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "number",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "unit",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "TrgUnit"
            }
        ],
        "docs": "Modify death counts for player: Set quantity for unit.\n\nThis will set the death counter of a particular unit, for the specified\nplayer, to a value listed in the action."
    },
    {
        "name": "SetDeathsX",
        "args": [
            {
                "name": "player",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "modifier",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "number",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "unit",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "TrgUnit"
            },
            {
                "name": "mask",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "SetDoodadState",
        "args": [
            {
                "name": "state",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "unit",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "TrgUnit"
            },
            {
                "name": "owner",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "where",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": "Set doodad state for units for player at location.\n\nThe Installation tileset contains several doodads that can be enabled or\ndisabled. The doors and concealed turrets can be set to start in one state\nor another by double clicking on them in the main window, but this action\nallows you to change their state during the course of the scenario. A\nlocation must be drawn around the doodads that you wish to affect with this\naction.\n\nEnabling a door closes it, and enabling a turret causes it to\nactivate and attack any enemies of the trigger owner."
    },
    {
        "name": "SetGrpWire",
        "args": [
            {
                "name": "unit",
                "kind": "POSITIONAL_ONLY",
                "default": {
                    "value": "empty",
                    "type": "str"
                },
                "type": "any"
            },
            {
                "name": "wireframe",
                "kind": "POSITIONAL_ONLY",
                "default": {
                    "value": "empty",
                    "type": "str"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "SetInvincibility",
        "args": [
            {
                "name": "state",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "unit",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "TrgUnit"
            },
            {
                "name": "owner",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "where",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": "Set invincibility for units owned by player at location.\n\nThis action makes the specified unit or units Invincible.\nInvincible units cannot be targeted or attacked, and take no damage."
    },
    {
        "name": "SetKills",
        "args": [
            {
                "name": "player",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "modifier",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "number",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "unit",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "TrgUnit"
            }
        ],
        "docs": ""
    },
    {
        "name": "SetMemory",
        "args": [
            {
                "name": "dest",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "modtype",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "TrgModifier"
            },
            {
                "name": "value",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "SetMemoryEPD",
        "args": [
            {
                "name": "dest",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "modtype",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "TrgModifier"
            },
            {
                "name": "value",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "SetMemoryX",
        "args": [
            {
                "name": "dest",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "modtype",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "TrgModifier"
            },
            {
                "name": "value",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "mask",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "SetMemoryXEPD",
        "args": [
            {
                "name": "epd",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "modtype",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "TrgModifier"
            },
            {
                "name": "value",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "mask",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "SetMissionObjectives",
        "args": [
            {
                "name": "text",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": "Set Mission Objectives to: text.\n\nChanges the mission objectives text to something other than what was\ndefined at the outset of the level. While this doesn't actually change the\nvictory or defeat conditions for the scenario, it can be used to notify\nthe players of changes to the scenario's objectives."
    },
    {
        "name": "SetMissionObjectivesAll",
        "args": [
            {
                "name": "text",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": "Action: SetMissionObjectives for everyone (including observers)"
    },
    {
        "name": "SetNextPtr",
        "args": [
            {
                "name": "trg",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "dest",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "SetNextScenario",
        "args": [
            {
                "name": "scenario_name",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": "Load scenario after completion of current game.\n\nThis trigger offers the ability to link multiple user-created maps together\nto form one large campaign."
    },
    {
        "name": "SetNextTrigger",
        "args": [
            {
                "name": "trg",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": "For optimization purpose, one may call this function directly"
    },
    {
        "name": "SetPName",
        "args": [
            {
                "name": "player",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "name",
                "kind": "VAR_POSITIONAL",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "SetPNamef",
        "args": [
            {
                "name": "player",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "format_string",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "args",
                "kind": "VAR_POSITIONAL",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "SetResources",
        "args": [
            {
                "name": "player",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "modifier",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "amount",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "resource_type",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": "Modify resources for player: Set quantity resource.\n\nThe set resources action allows you to increase, decrease, or set\nthe amount of resources that a player has."
    },
    {
        "name": "SetScore",
        "args": [
            {
                "name": "player",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "modifier",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "amount",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "ScoreType",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "TrgScore"
            }
        ],
        "docs": "Modify score for player: Set quantity points.\n\nThe set score action lets you the increase, decrease, or set the number of\npoints that a player currently has."
    },
    {
        "name": "SetSwitch",
        "args": [
            {
                "name": "switch",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "state",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": "Set switch.\n\nThe set switch action can be used to:\n- Set a switch to its set position.\n- Clear a switch to its cleared position.\n- Toggle a switch: if a switch is cleared, it becomes set;\n                   if it is set, it becomes cleared.\n- Randomly choose between the set or cleared position."
    },
    {
        "name": "SetTranWire",
        "args": [
            {
                "name": "unit",
                "kind": "POSITIONAL_ONLY",
                "default": {
                    "value": "empty",
                    "type": "str"
                },
                "type": "any"
            },
            {
                "name": "wireframe",
                "kind": "POSITIONAL_ONLY",
                "default": {
                    "value": "empty",
                    "type": "str"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "SetVariables",
        "args": [
            {
                "name": "srclist",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "dstlist",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "mdtlist",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "None",
                    "type": "NoneType"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "SetWirefram",
        "args": [
            {
                "name": "unit",
                "kind": "POSITIONAL_ONLY",
                "default": {
                    "value": "empty",
                    "type": "str"
                },
                "type": "any"
            },
            {
                "name": "wireframe",
                "kind": "POSITIONAL_ONLY",
                "default": {
                    "value": "empty",
                    "type": "str"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "SetWireframes",
        "args": [
            {
                "name": "unit",
                "kind": "POSITIONAL_ONLY",
                "default": {
                    "value": "empty",
                    "type": "str"
                },
                "type": "any"
            },
            {
                "name": "wireframe",
                "kind": "POSITIONAL_ONLY",
                "default": {
                    "value": "empty",
                    "type": "str"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "ShufflePayload",
        "args": [
            {
                "name": "mode",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": "Set payload shuffle mode.\n\n:param mode: If true, enable object shuffling (compression). If false,\ndisable it."
    },
    {
        "name": "Switch",
        "args": [
            {
                "name": "switch",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "state",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": "Switch is set.\n\nThis allows you to test against a switch value. Switches are on/off values\nthat can be set with an action.\nSwitches can be used to keep track of which triggers have been activated,\nto disable or enable certain triggers or to link multiple triggers\ntogether. You may also rename switches from this dialog box."
    },
    {
        "name": "TalkingPortrait",
        "args": [
            {
                "name": "unit",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "TrgUnit"
            },
            {
                "name": "time",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": "Show unit talking to current player for duration milliseconds.\n\nThis will show the unit picture of your choice in the unit window in the\ngame screen for the specified amount of time."
    },
    {
        "name": "TalkingPortraitAll",
        "args": [
            {
                "name": "unit",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "TrgUnit"
            },
            {
                "name": "time",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": "Action: TalkingPortrait for everyone (including observers)"
    },
    {
        "name": "TextFX_FadeIn",
        "args": [
            {
                "name": "args",
                "kind": "VAR_POSITIONAL",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "color",
                "kind": "KEYWORD_ONLY",
                "default": {
                    "value": "None",
                    "type": "NoneType"
                },
                "type": "any"
            },
            {
                "name": "wait",
                "kind": "KEYWORD_ONLY",
                "default": {
                    "value": "1",
                    "type": "int"
                },
                "type": "any"
            },
            {
                "name": "reset",
                "kind": "KEYWORD_ONLY",
                "default": {
                    "value": "True",
                    "type": "bool"
                },
                "type": "any"
            },
            {
                "name": "tag",
                "kind": "KEYWORD_ONLY",
                "default": {
                    "value": "None",
                    "type": "NoneType"
                },
                "type": "any"
            },
            {
                "name": "encoding",
                "kind": "KEYWORD_ONLY",
                "default": {
                    "value": "UTF-8",
                    "type": "str"
                },
                "type": "any"
            }
        ],
        "docs": "Print multiple string / number and apply color from Left To Right\n\nKeyword arguments:\ncolor -- tuple of color codes (default 0x03, 0x04, 0x05, 0x14)\nwait  -- time interval between effect (default 1)\nreset -- automatically reset when didn't run for a moment (default True)\ntag   -- internal tag and identifier (default: vargs)"
    },
    {
        "name": "TextFX_FadeOut",
        "args": [
            {
                "name": "args",
                "kind": "VAR_POSITIONAL",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "color",
                "kind": "KEYWORD_ONLY",
                "default": {
                    "value": "None",
                    "type": "NoneType"
                },
                "type": "any"
            },
            {
                "name": "wait",
                "kind": "KEYWORD_ONLY",
                "default": {
                    "value": "1",
                    "type": "int"
                },
                "type": "any"
            },
            {
                "name": "reset",
                "kind": "KEYWORD_ONLY",
                "default": {
                    "value": "True",
                    "type": "bool"
                },
                "type": "any"
            },
            {
                "name": "tag",
                "kind": "KEYWORD_ONLY",
                "default": {
                    "value": "None",
                    "type": "NoneType"
                },
                "type": "any"
            },
            {
                "name": "encoding",
                "kind": "KEYWORD_ONLY",
                "default": {
                    "value": "UTF-8",
                    "type": "str"
                },
                "type": "any"
            }
        ],
        "docs": "Print multiple string / number and apply color from Left To Right\n\nKeyword arguments:\ncolor -- tuple of color codes (default 0x03, 0x04, 0x05, 0x14)\nwait  -- time interval between effect (default 1)\nreset -- automatically reset when didn't run for a moment (default True)\ntag   -- internal tag and identifier (default: vargs)"
    },
    {
        "name": "TextFX_Remove",
        "args": [
            {
                "name": "tag",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "TextFX_SetTimer",
        "args": [
            {
                "name": "tag",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "modtype",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "TrgModifier"
            },
            {
                "name": "value",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "Transmission",
        "args": [
            {
                "name": "unit",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "TrgUnit"
            },
            {
                "name": "where",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "sound_name",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "time_modifier",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "time",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "text",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "AlwaysDisplay",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "4",
                    "type": "int"
                },
                "type": "any"
            }
        ],
        "docs": "Send transmission to current player from unit at location.\n\nA transmission is a combination of several different actions.\nFirst, you need to specify which unit at a location you want to send the\ntransmission. This unit's portrait will be displayed for the duration of\nthe transmission.\nYou then need to select a WAV file to play, how long to animate the unit\nportrait, and what text message to display. The player receiving\nthe transmission will receive a minimap ping when the transmission starts,\nand can press the space bar to center their screen on the unit sending the\ntransmission.\n\nNote that this action has no effect on computer players,\nand it will prevent any other action (in the same trigger) from resuming\nuntil it has finished."
    },
    {
        "name": "TrigTriggerBegin",
        "args": [
            {
                "name": "player",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "TrigTriggerEnd",
        "args": [
            {
                "name": "player",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "Trigger",
        "args": [
            {
                "name": "conditions",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "None",
                    "type": "NoneType"
                },
                "type": "any"
            },
            {
                "name": "actions",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "None",
                    "type": "NoneType"
                },
                "type": "any"
            },
            {
                "name": "preserved",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "True",
                    "type": "bool"
                },
                "type": "any"
            }
        ],
        "docs": "General easy-to-use trigger\n\n:param conditions: List of conditions. If there are none, trigger will\n    always execute.\n:param actions: List of actions. If there are none, trigger will have no\n    actions.\n:param preserved: Is trigger preserved? True by default.\n\n.. note::\n    This is 'extended' trigger. All conditions and variables can contain\n    `EUDVariable` object, and there may be more than 16 conditions and 64\n    actions. Trigger internally uses `RawTrigger`."
    },
    {
        "name": "UnMuteUnitSpeech",
        "args": [],
        "docs": "Unmute all non-trigger unit sounds for current player.\n\nThis action sets the sound effects for the game back to their original\nstate."
    },
    {
        "name": "UnpauseGame",
        "args": [],
        "docs": "Unpause the game.\n\nThis action resumes the game from a paused session.\nNote that this has no effect in multiplayer maps and will not effect any\ncomputer opponents in single player maps."
    },
    {
        "name": "UnpauseTimer",
        "args": [],
        "docs": "Unpause the countdown timer.\n\nThis action will resume the timer from a paused session."
    },
    {
        "name": "VProc",
        "args": [
            {
                "name": "v",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "actions",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "Victory",
        "args": [],
        "docs": "End scenario in victory for current player.\n\nThe game ends in victory for the trigger's owner.\nAny players who are not executing a victory action are defeated."
    },
    {
        "name": "Wait",
        "args": [
            {
                "name": "time",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": "Wait for duration milliseconds.\n\nThe wait action is used to delay other actions for the specified number of\nmilliseconds. Because it is a blocking action, no other actions in the same\ntrigger and no other blocking actions in other triggers will activate\nuntil it is done."
    },
    {
        "name": "_rand_lst",
        "args": [
            {
                "name": "lst",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "b2i1",
        "args": [
            {
                "name": "b",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "index",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "0",
                    "type": "int"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "b2i2",
        "args": [
            {
                "name": "b",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "index",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "0",
                    "type": "int"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "b2i4",
        "args": [
            {
                "name": "b",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "index",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "0",
                    "type": "int"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "b2u",
        "args": [
            {
                "name": "b",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "b2utf8",
        "args": [
            {
                "name": "b",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "bits",
        "args": [
            {
                "name": "n",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "TrgUnit"
            }
        ],
        "docs": ""
    },
    {
        "name": "cachedfunc",
        "args": [
            {
                "name": "user_function",
                "kind": "POSITIONAL_ONLY",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": "Simple lightweight unbounded cache.  Sometimes called \"memoize\"."
    },
    {
        "name": "ep_assert",
        "args": [
            {
                "name": "statement",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "message",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "Assertion failed",
                    "type": "str"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "ep_eprint",
        "args": [
            {
                "name": "args",
                "kind": "VAR_POSITIONAL",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "kwargs",
                "kind": "VAR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "ep_warn",
        "args": [
            {
                "name": "message",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "epsCompile",
        "args": [
            {
                "name": "filename",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "b_code",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "eudplibVersion",
        "args": [],
        "docs": ""
    },
    {
        "name": "f_addcurpl",
        "args": [
            {
                "name": "cp",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": "Add current player value.\n\neudplib internally caches the current player value,\nso this function add to that value."
    },
    {
        "name": "f_addloc",
        "args": [
            {
                "name": "loc",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "coords",
                "kind": "VAR_POSITIONAL",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "action",
                "kind": "KEYWORD_ONLY",
                "default": {
                    "value": "False",
                    "type": "bool"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "f_atan2",
        "args": [
            {
                "name": "y",
                "kind": "POSITIONAL_ONLY",
                "default": {
                    "value": "empty",
                    "type": "str"
                },
                "type": "any"
            },
            {
                "name": "x",
                "kind": "POSITIONAL_ONLY",
                "default": {
                    "value": "empty",
                    "type": "str"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "f_atan2_256",
        "args": [
            {
                "name": "y",
                "kind": "POSITIONAL_ONLY",
                "default": {
                    "value": "empty",
                    "type": "str"
                },
                "type": "any"
            },
            {
                "name": "x",
                "kind": "POSITIONAL_ONLY",
                "default": {
                    "value": "empty",
                    "type": "str"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "f_badd_epd",
        "args": [
            {
                "name": "epd",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "subp",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "b",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "f_bitand",
        "args": [
            {
                "name": "a",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "b",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": "Calculate a & b"
    },
    {
        "name": "f_bitlshift",
        "args": [
            {
                "name": "a",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "b",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "_fdict",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "{}",
                    "type": "dict"
                },
                "type": "any"
            },
            {
                "name": "kwargs",
                "kind": "VAR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": "Calculate a << b"
    },
    {
        "name": "f_bitnand",
        "args": [
            {
                "name": "a",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "b",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": "Calculate ~(a & b)"
    },
    {
        "name": "f_bitnor",
        "args": [
            {
                "name": "a",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "b",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": "Calculate ~(a | b)"
    },
    {
        "name": "f_bitnot",
        "args": [
            {
                "name": "a",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": "Calculate ~a"
    },
    {
        "name": "f_bitnxor",
        "args": [
            {
                "name": "a",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "b",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": "Calculate ~(a ^ b)"
    },
    {
        "name": "f_bitor",
        "args": [
            {
                "name": "a",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "b",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": "Calculate a | b"
    },
    {
        "name": "f_bitrshift",
        "args": [
            {
                "name": "a",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "b",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "kwargs",
                "kind": "VAR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": "Calculate a >> b"
    },
    {
        "name": "f_bitsplit",
        "args": [
            {
                "name": "a",
                "kind": "POSITIONAL_ONLY",
                "default": {
                    "value": "empty",
                    "type": "str"
                },
                "type": "any"
            }
        ],
        "docs": "Splits bit of given number\n\n:returns: int bits[32];  // bits[i] = (ith bit from LSB of a is set)"
    },
    {
        "name": "f_bitxor",
        "args": [
            {
                "name": "a",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "b",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": "Calculate a ^ b"
    },
    {
        "name": "f_bread",
        "args": [
            {
                "name": "ptr",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "kwargs",
                "kind": "VAR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "f_bread_cp",
        "args": [
            {
                "name": "cpo",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "subp",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "kwargs",
                "kind": "VAR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "f_bread_epd",
        "args": [
            {
                "name": "epd",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "subp",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "ret",
                "kind": "KEYWORD_ONLY",
                "default": {
                    "value": "None",
                    "type": "NoneType"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "f_bsubtract_epd",
        "args": [
            {
                "name": "epd",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "subp",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "b",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "f_bwrite",
        "args": [
            {
                "name": "ptr",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "b",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "f_bwrite_cp",
        "args": [
            {
                "name": "cpo",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "subp",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "b",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "f_bwrite_epd",
        "args": [
            {
                "name": "epd",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "subp",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "b",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "f_cp949_to_utf8_cpy",
        "args": [
            {
                "name": "dst",
                "kind": "POSITIONAL_ONLY",
                "default": {
                    "value": "empty",
                    "type": "str"
                },
                "type": "any"
            },
            {
                "name": "src",
                "kind": "POSITIONAL_ONLY",
                "default": {
                    "value": "empty",
                    "type": "str"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "f_cpstr_adddw",
        "args": [
            {
                "name": "number",
                "kind": "POSITIONAL_ONLY",
                "default": {
                    "value": "empty",
                    "type": "str"
                },
                "type": "any"
            }
        ],
        "docs": "Print number as string to CurrentPlayer.\n\n:param number: DWORD to print"
    },
    {
        "name": "f_cpstr_addptr",
        "args": [
            {
                "name": "number",
                "kind": "POSITIONAL_ONLY",
                "default": {
                    "value": "empty",
                    "type": "str"
                },
                "type": "any"
            }
        ],
        "docs": "Print number as string to CurrentPlayer.\n\n:param number: DWORD to print"
    },
    {
        "name": "f_cpstr_addstr",
        "args": [
            {
                "name": "src",
                "kind": "POSITIONAL_ONLY",
                "default": {
                    "value": "empty",
                    "type": "str"
                },
                "type": "any"
            }
        ],
        "docs": "Print string as string to CurrentPlayer\n\n:param src: Source address (Not EPD player)"
    },
    {
        "name": "f_cpstr_print",
        "args": [
            {
                "name": "args",
                "kind": "VAR_POSITIONAL",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "EOS",
                "kind": "KEYWORD_ONLY",
                "default": {
                    "value": "True",
                    "type": "bool"
                },
                "type": "any"
            },
            {
                "name": "encoding",
                "kind": "KEYWORD_ONLY",
                "default": {
                    "value": "UTF-8",
                    "type": "str"
                },
                "type": "any"
            }
        ],
        "docs": "Print multiple string / number to CurrentPlayer.\n\n:param args: Things to print"
    },
    {
        "name": "f_cunitepdread_cp",
        "args": [
            {
                "name": "cpo",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "kwargs",
                "kind": "VAR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "f_cunitepdread_epd",
        "args": [
            {
                "name": "targetplayer",
                "kind": "POSITIONAL_ONLY",
                "default": {
                    "value": "empty",
                    "type": "str"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "f_cunitread_cp",
        "args": [
            {
                "name": "cpo",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "kwargs",
                "kind": "VAR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "f_cunitread_epd",
        "args": [
            {
                "name": "targetplayer",
                "kind": "POSITIONAL_ONLY",
                "default": {
                    "value": "empty",
                    "type": "str"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "f_dbstr_print",
        "args": [
            {
                "name": "dst",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "args",
                "kind": "VAR_POSITIONAL",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "EOS",
                "kind": "KEYWORD_ONLY",
                "default": {
                    "value": "True",
                    "type": "bool"
                },
                "type": "any"
            },
            {
                "name": "encoding",
                "kind": "KEYWORD_ONLY",
                "default": {
                    "value": "UTF-8",
                    "type": "str"
                },
                "type": "any"
            }
        ],
        "docs": "Print multiple string / number to dst.\n\n:param dst: Destination address (Not EPD player)\n:param args: Things to print"
    },
    {
        "name": "f_dilateloc",
        "args": [
            {
                "name": "loc",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "coords",
                "kind": "VAR_POSITIONAL",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "action",
                "kind": "KEYWORD_ONLY",
                "default": {
                    "value": "False",
                    "type": "bool"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "f_div",
        "args": [
            {
                "name": "a",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "b",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "kwargs",
                "kind": "VAR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": "Calculates quotient and remainder of a by b, with unsigned division.\n\nFor signed division, uses `f_div_towards_zero`, `f_div_floor` and `f_div_euclid`."
    },
    {
        "name": "f_div_euclid",
        "args": [
            {
                "name": "a",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "b",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "kwargs",
                "kind": "VAR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": "Calculates the quotient and remainder of Euclidean division of a by b.\n\nCalculate signed division, unlike unsigned division `f_div(a, b)`.\nThis computes the quotient such that `a = quotient * b + remainder`,\nand `0 <= r < abs(b)`.\n\nIn other words, the result is a \u00f7 b rounded to the quotient\nsuch that `a >= quotient * b`.\nIf `a > 0`, this is equal to round towards zero; if `a < 0`,\nthis is equal to round towards +/- infinity (away from zero)."
    },
    {
        "name": "f_div_floor",
        "args": [
            {
                "name": "a",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "b",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "kwargs",
                "kind": "VAR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": "Calculates the quotient and remainder of (a \u00f7 b),\nrounding the quotient towards negative infinity.\n\nCalculate signed division, unlike unsigned division `f_div(a, b)`.\nConsistent with mathematical modulo."
    },
    {
        "name": "f_div_towards_zero",
        "args": [
            {
                "name": "a",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "b",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "kwargs",
                "kind": "VAR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": "Calculates the quotient and remainder of (a \u00f7 b),\nrounding the quotient towards zero.\n\nCalculate signed division, unlike unsigned division `f_div(a, b)`.\nConsistent with C-like languages including JavaScript."
    },
    {
        "name": "f_dwadd_cp",
        "args": [
            {
                "name": "cpo",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "value",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "f_dwadd_epd",
        "args": [
            {
                "name": "targetplayer",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "value",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "f_dwbreak",
        "args": [
            {
                "name": "number",
                "kind": "POSITIONAL_ONLY",
                "default": {
                    "value": "empty",
                    "type": "str"
                },
                "type": "any"
            }
        ],
        "docs": "Get hiword/loword/4byte of dword"
    },
    {
        "name": "f_dwbreak2",
        "args": [
            {
                "name": "number",
                "kind": "POSITIONAL_ONLY",
                "default": {
                    "value": "empty",
                    "type": "str"
                },
                "type": "any"
            }
        ],
        "docs": "Get hiword/loword/4byte of dword"
    },
    {
        "name": "f_dwepdread_cp",
        "args": [
            {
                "name": "cpo",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "kwargs",
                "kind": "VAR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "f_dwepdread_epd",
        "args": [
            {
                "name": "targetplayer",
                "kind": "POSITIONAL_ONLY",
                "default": {
                    "value": "empty",
                    "type": "str"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "f_dwepdread_epd_safe",
        "args": [
            {
                "name": "args",
                "kind": "VAR_POSITIONAL",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "kwargs",
                "kind": "VAR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "f_dwrand",
        "args": [],
        "docs": ""
    },
    {
        "name": "f_dwread",
        "args": [
            {
                "name": "ptr",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "kwargs",
                "kind": "VAR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "f_dwread_cp",
        "args": [
            {
                "name": "cpo",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "kwargs",
                "kind": "VAR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "f_dwread_epd",
        "args": [
            {
                "name": "targetplayer",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "ret",
                "kind": "KEYWORD_ONLY",
                "default": {
                    "value": "None",
                    "type": "NoneType"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "f_dwread_epd_safe",
        "args": [
            {
                "name": "args",
                "kind": "VAR_POSITIONAL",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "kwargs",
                "kind": "VAR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "f_dwsubtract_cp",
        "args": [
            {
                "name": "cpo",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "value",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "f_dwsubtract_epd",
        "args": [
            {
                "name": "targetplayer",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "value",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "f_dwwrite",
        "args": [
            {
                "name": "ptr",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "dw",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "f_dwwrite_cp",
        "args": [
            {
                "name": "cpo",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "value",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "f_dwwrite_epd",
        "args": [
            {
                "name": "targetplayer",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "value",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "f_epdcunitread_cp",
        "args": [
            {
                "name": "cpo",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "kwargs",
                "kind": "VAR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "f_epdcunitread_epd",
        "args": [
            {
                "name": "targetplayer",
                "kind": "POSITIONAL_ONLY",
                "default": {
                    "value": "empty",
                    "type": "str"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "f_epdread_cp",
        "args": [
            {
                "name": "cpo",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "kwargs",
                "kind": "VAR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "f_epdread_epd",
        "args": [
            {
                "name": "targetplayer",
                "kind": "POSITIONAL_ONLY",
                "default": {
                    "value": "empty",
                    "type": "str"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "f_epdread_epd_safe",
        "args": [
            {
                "name": "args",
                "kind": "VAR_POSITIONAL",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "kwargs",
                "kind": "VAR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "f_epdspriteread_cp",
        "args": [
            {
                "name": "cpo",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "kwargs",
                "kind": "VAR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "f_epdspriteread_epd",
        "args": [
            {
                "name": "targetplayer",
                "kind": "POSITIONAL_ONLY",
                "default": {
                    "value": "empty",
                    "type": "str"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "f_eprintAll",
        "args": [
            {
                "name": "format_string",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "args",
                "kind": "VAR_POSITIONAL",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "f_eprintf",
        "args": [
            {
                "name": "format_string",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "args",
                "kind": "VAR_POSITIONAL",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "f_eprintln",
        "args": [
            {
                "name": "args",
                "kind": "VAR_POSITIONAL",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "f_eprintln2",
        "args": [
            {
                "name": "args",
                "kind": "VAR_POSITIONAL",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "f_flagread_epd",
        "args": [
            {
                "name": "targetplayer",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "flags",
                "kind": "VAR_POSITIONAL",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "_readerdict",
                "kind": "KEYWORD_ONLY",
                "default": {
                    "value": "{}",
                    "type": "dict"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "f_getcurpl",
        "args": [],
        "docs": "Get current player value.\n\neudplib internally caches the current player value, so this function uses\nthat value if the value is valid. Otherwise, update the current player\ncache and return it."
    },
    {
        "name": "f_getgametick",
        "args": [],
        "docs": "Get current game tick value."
    },
    {
        "name": "f_getlocTL",
        "args": [
            {
                "name": "loc",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "kwargs",
                "kind": "VAR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": "\ub85c\ucf00\uc774\uc158\uc758 \uc704(top), \uc67c\ucabd (left) \uc88c\ud45c\ub97c \uc5bb\uc5b4\ub0c5\ub2c8\ub2e4.\n@param {[type]} loc \ub85c\ucf00\uc774\uc158 \ubc88\ud638. $L(\ub85c\ucf00\uc774\uc158 \uc774\ub984) \uc73c\ub85c \uc5bb\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4."
    },
    {
        "name": "f_getseed",
        "args": [],
        "docs": ""
    },
    {
        "name": "f_gettextptr",
        "args": [],
        "docs": ""
    },
    {
        "name": "f_getuserplayerid",
        "args": [],
        "docs": ""
    },
    {
        "name": "f_lengthdir",
        "args": [
            {
                "name": "length",
                "kind": "POSITIONAL_ONLY",
                "default": {
                    "value": "empty",
                    "type": "str"
                },
                "type": "any"
            },
            {
                "name": "angle",
                "kind": "POSITIONAL_ONLY",
                "default": {
                    "value": "empty",
                    "type": "str"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "f_lengthdir_256",
        "args": [
            {
                "name": "length",
                "kind": "POSITIONAL_ONLY",
                "default": {
                    "value": "empty",
                    "type": "str"
                },
                "type": "any"
            },
            {
                "name": "angle",
                "kind": "POSITIONAL_ONLY",
                "default": {
                    "value": "empty",
                    "type": "str"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "f_maskread_cp",
        "args": [
            {
                "name": "cpoffset",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "mask",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "_fdict",
                "kind": "KEYWORD_ONLY",
                "default": {
                    "value": "{}",
                    "type": "dict"
                },
                "type": "any"
            },
            {
                "name": "kwargs",
                "kind": "VAR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "f_maskread_epd",
        "args": [
            {
                "name": "targetplayer",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "mask",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "_fdict",
                "kind": "KEYWORD_ONLY",
                "default": {
                    "value": "{}",
                    "type": "dict"
                },
                "type": "any"
            },
            {
                "name": "kwargs",
                "kind": "VAR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "f_maskwrite_cp",
        "args": [
            {
                "name": "cpo",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "value",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "mask",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "f_maskwrite_epd",
        "args": [
            {
                "name": "epd",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "value",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "mask",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "f_memcmp",
        "args": [
            {
                "name": "buf1",
                "kind": "POSITIONAL_ONLY",
                "default": {
                    "value": "empty",
                    "type": "str"
                },
                "type": "any"
            },
            {
                "name": "buf2",
                "kind": "POSITIONAL_ONLY",
                "default": {
                    "value": "empty",
                    "type": "str"
                },
                "type": "any"
            },
            {
                "name": "count",
                "kind": "POSITIONAL_ONLY",
                "default": {
                    "value": "empty",
                    "type": "str"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "f_memcpy",
        "args": [
            {
                "name": "dst",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "src",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "copylen",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "kwargs",
                "kind": "VAR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "f_mul",
        "args": [
            {
                "name": "a",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "b",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "kwargs",
                "kind": "VAR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": "Calculate a * b"
    },
    {
        "name": "f_parse",
        "args": [
            {
                "name": "dst",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "radix",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "10",
                    "type": "int"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "f_playerexist",
        "args": [
            {
                "name": "player",
                "kind": "POSITIONAL_ONLY",
                "default": {
                    "value": "empty",
                    "type": "str"
                },
                "type": "any"
            }
        ],
        "docs": "Check if player has not left the game.\n\n:returns: 1 if player exists, 0 if not."
    },
    {
        "name": "f_posread_cp",
        "args": [
            {
                "name": "cpoffset",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "kwargs",
                "kind": "VAR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "f_posread_epd",
        "args": [
            {
                "name": "epd",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "kwargs",
                "kind": "VAR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "f_pow",
        "args": [
            {
                "name": "a",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "b",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": "f_pow(a, b) calculates a ** b"
    },
    {
        "name": "f_printAll",
        "args": [
            {
                "name": "format_string",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "args",
                "kind": "VAR_POSITIONAL",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "f_printAllAt",
        "args": [
            {
                "name": "line",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "format_string",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "args",
                "kind": "VAR_POSITIONAL",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "f_printAt",
        "args": [
            {
                "name": "line",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "format_string",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "args",
                "kind": "VAR_POSITIONAL",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "f_println",
        "args": [
            {
                "name": "format_string",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "args",
                "kind": "VAR_POSITIONAL",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "f_raise_CCMU",
        "args": [
            {
                "name": "player",
                "kind": "POSITIONAL_ONLY",
                "default": {
                    "value": "empty",
                    "type": "str"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "f_rand",
        "args": [],
        "docs": ""
    },
    {
        "name": "f_randomize",
        "args": [],
        "docs": ""
    },
    {
        "name": "f_readgen_cp",
        "args": [
            {
                "name": "mask",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "args",
                "kind": "VAR_POSITIONAL",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "docstring",
                "kind": "KEYWORD_ONLY",
                "default": {
                    "value": "None",
                    "type": "NoneType"
                },
                "type": "any"
            },
            {
                "name": "_check_empty",
                "kind": "KEYWORD_ONLY",
                "default": {
                    "value": "False",
                    "type": "bool"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "f_readgen_epd",
        "args": [
            {
                "name": "mask",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "args",
                "kind": "VAR_POSITIONAL",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "docstring",
                "kind": "KEYWORD_ONLY",
                "default": {
                    "value": "None",
                    "type": "NoneType"
                },
                "type": "any"
            },
            {
                "name": "_check_empty",
                "kind": "KEYWORD_ONLY",
                "default": {
                    "value": "False",
                    "type": "bool"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "f_repmovsd_epd",
        "args": [
            {
                "name": "dstepdp",
                "kind": "POSITIONAL_ONLY",
                "default": {
                    "value": "empty",
                    "type": "str"
                },
                "type": "any"
            },
            {
                "name": "srcepdp",
                "kind": "POSITIONAL_ONLY",
                "default": {
                    "value": "empty",
                    "type": "str"
                },
                "type": "any"
            },
            {
                "name": "copydwn",
                "kind": "POSITIONAL_ONLY",
                "default": {
                    "value": "empty",
                    "type": "str"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "f_setcurpl",
        "args": [
            {
                "name": "cp",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "actions",
                "kind": "KEYWORD_ONLY",
                "default": {
                    "value": "[]",
                    "type": "list"
                },
                "type": "any"
            },
            {
                "name": "set_modifier",
                "kind": "KEYWORD_ONLY",
                "default": {
                    "value": "True",
                    "type": "bool"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "f_setcurpl2cpcache",
        "args": [
            {
                "name": "v",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "[]",
                    "type": "list"
                },
                "type": "any"
            },
            {
                "name": "actions",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "[]",
                    "type": "list"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "f_setloc",
        "args": [
            {
                "name": "loc",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "coords",
                "kind": "VAR_POSITIONAL",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "action",
                "kind": "KEYWORD_ONLY",
                "default": {
                    "value": "False",
                    "type": "bool"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "f_setloc_epd",
        "args": [
            {
                "name": "loc",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "epd",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "f_settbl",
        "args": [
            {
                "name": "tbl_id",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "offset",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "args",
                "kind": "VAR_POSITIONAL",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "encoding",
                "kind": "KEYWORD_ONLY",
                "default": {
                    "value": "None",
                    "type": "NoneType"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "f_settbl2",
        "args": [
            {
                "name": "tbl_id",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "offset",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "args",
                "kind": "VAR_POSITIONAL",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "encoding",
                "kind": "KEYWORD_ONLY",
                "default": {
                    "value": "None",
                    "type": "NoneType"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "f_settblf",
        "args": [
            {
                "name": "tbl_id",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "offset",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "format_string",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "args",
                "kind": "VAR_POSITIONAL",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "encoding",
                "kind": "KEYWORD_ONLY",
                "default": {
                    "value": "None",
                    "type": "NoneType"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "f_settblf2",
        "args": [
            {
                "name": "tbl_id",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "offset",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "format_string",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "args",
                "kind": "VAR_POSITIONAL",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "encoding",
                "kind": "KEYWORD_ONLY",
                "default": {
                    "value": "None",
                    "type": "NoneType"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "f_simpleprint",
        "args": [
            {
                "name": "args",
                "kind": "VAR_POSITIONAL",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "spaced",
                "kind": "KEYWORD_ONLY",
                "default": {
                    "value": "True",
                    "type": "bool"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "f_sprintf",
        "args": [
            {
                "name": "dst",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "format_string",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "args",
                "kind": "VAR_POSITIONAL",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "EOS",
                "kind": "KEYWORD_ONLY",
                "default": {
                    "value": "True",
                    "type": "bool"
                },
                "type": "any"
            },
            {
                "name": "encoding",
                "kind": "KEYWORD_ONLY",
                "default": {
                    "value": "UTF-8",
                    "type": "str"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "f_sprintf_cp",
        "args": [
            {
                "name": "format_string",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "args",
                "kind": "VAR_POSITIONAL",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "EOS",
                "kind": "KEYWORD_ONLY",
                "default": {
                    "value": "True",
                    "type": "bool"
                },
                "type": "any"
            },
            {
                "name": "encoding",
                "kind": "KEYWORD_ONLY",
                "default": {
                    "value": "UTF-8",
                    "type": "str"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "f_spriteepdread_cp",
        "args": [
            {
                "name": "cpo",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "kwargs",
                "kind": "VAR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "f_spriteepdread_epd",
        "args": [
            {
                "name": "targetplayer",
                "kind": "POSITIONAL_ONLY",
                "default": {
                    "value": "empty",
                    "type": "str"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "f_spriteread_cp",
        "args": [
            {
                "name": "cpo",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "kwargs",
                "kind": "VAR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "f_spriteread_epd",
        "args": [
            {
                "name": "targetplayer",
                "kind": "POSITIONAL_ONLY",
                "default": {
                    "value": "empty",
                    "type": "str"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "f_sqrt",
        "args": [
            {
                "name": "n",
                "kind": "POSITIONAL_ONLY",
                "default": {
                    "value": "empty",
                    "type": "str"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "f_srand",
        "args": [
            {
                "name": "seed",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "f_strcmp",
        "args": [
            {
                "name": "s1",
                "kind": "POSITIONAL_ONLY",
                "default": {
                    "value": "empty",
                    "type": "str"
                },
                "type": "any"
            },
            {
                "name": "s2",
                "kind": "POSITIONAL_ONLY",
                "default": {
                    "value": "empty",
                    "type": "str"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "f_strcpy",
        "args": [
            {
                "name": "dst",
                "kind": "POSITIONAL_ONLY",
                "default": {
                    "value": "empty",
                    "type": "str"
                },
                "type": "any"
            },
            {
                "name": "src",
                "kind": "POSITIONAL_ONLY",
                "default": {
                    "value": "empty",
                    "type": "str"
                },
                "type": "any"
            }
        ],
        "docs": "Strcpy equivalent in eudplib. Copy C-style string.\n\n:param dst: Destination address (Not EPD player)\n:param src: Source address (Not EPD player)\n\n:return: dst"
    },
    {
        "name": "f_strlen",
        "args": [
            {
                "name": "src",
                "kind": "POSITIONAL_ONLY",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "kwargs",
                "kind": "VAR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "f_strlen_epd",
        "args": [
            {
                "name": "epd",
                "kind": "POSITIONAL_ONLY",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "subp",
                "kind": "POSITIONAL_ONLY",
                "default": {
                    "value": "0",
                    "type": "int"
                },
                "type": "any"
            },
            {
                "name": "kwargs",
                "kind": "VAR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "f_strnstr",
        "args": [
            {
                "name": "string",
                "kind": "POSITIONAL_ONLY",
                "default": {
                    "value": "empty",
                    "type": "str"
                },
                "type": "any"
            },
            {
                "name": "substring",
                "kind": "POSITIONAL_ONLY",
                "default": {
                    "value": "empty",
                    "type": "str"
                },
                "type": "any"
            },
            {
                "name": "count",
                "kind": "POSITIONAL_ONLY",
                "default": {
                    "value": "empty",
                    "type": "str"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "f_wadd_epd",
        "args": [
            {
                "name": "epd",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "subp",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "w",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "f_wread",
        "args": [
            {
                "name": "ptr",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "kwargs",
                "kind": "VAR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "f_wread_cp",
        "args": [
            {
                "name": "cpo",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "subp",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "kwargs",
                "kind": "VAR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "f_wread_epd",
        "args": [
            {
                "name": "epd",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "subp",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "ret",
                "kind": "KEYWORD_ONLY",
                "default": {
                    "value": "None",
                    "type": "NoneType"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "f_wsubtract_epd",
        "args": [
            {
                "name": "epd",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "subp",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "w",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "f_wwrite",
        "args": [
            {
                "name": "ptr",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "w",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "f_wwrite_cp",
        "args": [
            {
                "name": "cpo",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "subp",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "w",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "f_wwrite_epd",
        "args": [
            {
                "name": "epd",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "subp",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "w",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "find_data_file",
        "args": [
            {
                "name": "filename",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "file",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "i2b1",
        "args": [
            {
                "name": "i",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "TrgUnit"
            }
        ],
        "docs": ""
    },
    {
        "name": "i2b2",
        "args": [
            {
                "name": "i",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "TrgUnit"
            }
        ],
        "docs": ""
    },
    {
        "name": "i2b4",
        "args": [
            {
                "name": "i",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "TrgUnit"
            }
        ],
        "docs": ""
    },
    {
        "name": "isUnproxyInstance",
        "args": [
            {
                "name": "x",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            },
            {
                "name": "cls",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    },
    {
        "name": "u2b",
        "args": [
            {
                "name": "s",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "TrgResource"
            }
        ],
        "docs": ""
    },
    {
        "name": "u2utf8",
        "args": [
            {
                "name": "s",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "TrgResource"
            }
        ],
        "docs": ""
    },
    {
        "name": "unProxy",
        "args": [
            {
                "name": "x",
                "kind": "POSITIONAL_OR_KEYWORD",
                "default": {
                    "value": "empty",
                    "type": "type"
                },
                "type": "any"
            }
        ],
        "docs": ""
    }
]